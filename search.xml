<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>位运算的那些骚操作</title>
      <link href="/2019/01/28/wei-yun-suan-de-na-xie-sao-cao-zuo/"/>
      <url>/2019/01/28/wei-yun-suan-de-na-xie-sao-cao-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天读到了大佬<strong>[石杉]</strong>的一篇有关算法的文章，决定记录一下这种花操作，虽然之前刷leetCode看到过这样的操作，但是还是容易忘记，所以在这里整理下。后面也思考了有关这个算法的一些扩展。</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><blockquote><p>一道说简单又不那么好对付的算法题：数组里有一个不同的数，剩余里都是两两相同，找出这个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1]<br>输出: 1</p></blockquote><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><blockquote><p>咋一看其实是很简单的，随便用个map，或者排序一下就可以，但是空间复杂度为O(1)的,这就不能用map了。时间复杂度是O(n),所以不能排序。<br>好像把我们的所有方法都赶尽杀绝了，突然脑袋一片空白。。。</p></blockquote><blockquote><p>还是直接说答案吧，技巧是使用未操作。每个数异或自己，为零。剩余的就是那个单独的数了</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 代码简单就不贴了</span></code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><blockquote><p>数组里有两个不同的数，剩余里都是两两相同，找出这两个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3]<br>输出: 1,3</p></blockquote><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><blockquote><p>如果还是使用刚刚的方法好像是没戏了，因为最后只留下了一个数。那怎么解答啊？<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。<br>我们利用不为0的那个位，将数组<strong>按这位是否是1</strong>(比如是第三位)，拆分开来。那么就形成了两个题目1的情况了，得解。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">findDiff</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 修改其中一个，生成两个不同的数</span>      arr<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">365</span><span class="token punctuation">;</span>      <span class="token function">method</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">^=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">>></span> bitIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      bitIndex <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找到那个为1 的位</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>temp <span class="token operator">>></span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 填进来，取后一位</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将当前的数交换出来</span>        <span class="token keyword">int</span> temp1 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp1<span class="token punctuation">;</span>        right <span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> leftNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNumber <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rightNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNumber <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leftNumber<span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> rightNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="继续推广"><a href="#继续推广" class="headerlink" title="继续推广"></a>继续推广</h2><blockquote><p>数组里有3个不同的数，剩余里都是两两相同，找出这三个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3,5]<br>输出: 1,3，5</p></blockquote><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><blockquote><p>如果还是使用刚刚的2方法好像是没戏了，因为两个数的抑或可能覆盖另外一个数的值。那有要怎么办啊。<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树在jdk中的实现</title>
      <link href="/2019/01/26/hong-hei-shu-rbtree-zai-jdk-zhong-de-shi-xian/"/>
      <url>/2019/01/26/hong-hei-shu-rbtree-zai-jdk-zhong-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>jdk里主要有TreeMap和HashMap里有用到红黑树的数据结构，我觉得TreeMap的实现看起来友好一点，但是长时间不看也容易忘记，在这一并整理一下。本次源码是基于jdk1.8的TreeMap的插入和删除的方法。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>红黑树的<strong>基本概念</strong>还是贴上来好点，该数据结构必须<strong>同时</strong>满足下面5点条件,<a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noopener">参见wiki</a>：</p><blockquote><ol><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点    </li></ol></blockquote><blockquote><p>其实如果你能细心看完wiki的介绍并理解这里就不用看了，由于情况较多我这里是跟着源码做的总结，个人觉得删除相对难理解一点。</p></blockquote><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入相对简单点，主要的工作是修复插入带来的影响，梳理下<strong>核心逻辑</strong>：</p><blockquote><p>父节点是红色的时候才会需要调整</p><ol><li>获取到叔节点的颜色  <ol><li>为红色：将父节点和叔节点染黑，爷节点染红，问题推向爷节点(<strong>回到开始</strong>)</li><li>为黑色：<ol><li>先将当前节点方向变为和父节点同向(即当前节点，父节点，爷节点摆成一条直线)</li><li>换色(交换父，爷节点颜色) + 旋转(爷节点为中心) <strong>调整结束</strong></li></ol></li></ol></li></ol></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** From CLR */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 父节点是红色的时候才会需要调整</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>color <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  父节点是左节点的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">leftOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 1. 获取到叔节点U(uncle)</span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> y <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果U为红色:将父节点和叔节点染黑，爷节点染红，问题向爷节点递推(进入下一个循环)</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// U 为黑色 不用递推可以直接解决</span>                    <span class="token comment" spellcheck="true">// 如果当前节点是父节点的右节点，左旋，将自己变成父节点的左节(变得和父节点同向)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 等价转换</span>                        x <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">rotateLeft</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 换色(交换父，爷节点颜色) + 旋转(爷节点为中心)</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父节点已经为黑</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 此时父节点为黑色，调整结束</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对称的，和上面思路一样</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        root<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除相对复杂，主要的工作是修复删除带来的影响，梳理下<strong>核心逻辑</strong>：</p><blockquote><p>当前节点是黑色的时候才需要修复，前面先使用后继节点删除，所以需要向当前节点这里<strong>补一个黑色节点</strong></p><ol><li>得到兄弟节点<ol><li>将兄弟节点变为黑色(如果兄弟节点为红的话)</li><li><strong>兄弟节点</strong>是否有<strong>红色子节点</strong><ol><li>没有: 问题移向父节点(<strong>回到开始1</strong>)</li><li>有: 先将和当前节点反方向上的<strong>兄弟节点的子节点N</strong>变为红色，将N染黑，交换兄弟和父节点颜色，以父节点为中心，向当前节点方向旋转(<strong>结束</strong>)</li></ol></li></ol></li></ol></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** From CLR */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fixAfterDeletion</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前为左节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token function">leftOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 得到兄弟节点 </span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> sib <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果兄弟节点为红色， 交换兄弟节点和父节点颜色并左旋(目的是将兄弟节点变为黑色) </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span> <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sib <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 兄弟节点是否有红色子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">leftOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">==</span> BLACK <span class="token operator">&amp;&amp;</span>                    <span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">rightOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将兄弟节点的右子节点变为红色</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">rightOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">leftOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">rotateRight</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">;</span>                        sib <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 将兄弟节点右子节点染黑，交换兄弟和父节点的颜色</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> <span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">rightOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 以父节点为中心左旋，这样自己这边就多了一个黑色节点，补偿结束！</span>                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> root<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对称,逻辑一模一样</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">setColor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>wiki里的c实现使用的是<strong>尾递归</strong>,但是java使用的是<strong>非递归的while</strong>实现的，好像目前java没有对尾递归做优化。</p></blockquote><h3 id="插入的修复"><a href="#插入的修复" class="headerlink" title="插入的修复"></a>插入的修复</h3><p><img src="/images/红黑树插入调整.png" alt=""></p><blockquote><p>图片点击放大</p></blockquote><hr><h3 id="删除的修复"><a href="#删除的修复" class="headerlink" title="删除的修复"></a>删除的修复</h3><p><img src="/images/红黑树插入调整.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查快改慢B+树,改快查慢LSM树</title>
      <link href="/2019/01/23/cha-kuai-gai-man-b-shu-gai-kuai-cha-man-lsm-shu/"/>
      <url>/2019/01/23/cha-kuai-gai-man-b-shu-gai-kuai-cha-man-lsm-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://bing.ioliu.cn/photo/EyeFireworks_EN-AU4834024020" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>书本<a href=""><strong>数据结构与算法</strong></a>里面就提到过B树在索引上的应用,而实际应用中一直有许多牛人又对这个数据结构持续做了多优，然这个结构一直有。</p></blockquote><hr><h3 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h3><p>数据库的索引其实指的是<strong>索引文件</strong>，而B+树是我们索引文件<strong>储存方式</strong>。用于给存储引擎(这里指innodb)查找指定的数据，这里有必要温习一下数据库查根据where条件查找数据的过程，过程发生在storage engine层：</p><blockquote><ol><li>index Key<ul><li>首先将index key条件满足的索引记录区间确定，再索引上使用index filter进行过滤</li></ul></li><li>index Filter<ul><li>将满足的index filter条件的索引记录才去回表取出整行记录返回server层</li><li>不满足index filter条件的索引记录丢弃，不回表、也不会返回server层 </li></ul></li><li>Table Filter<ul><li>非索引层面的数据过滤，server 层对返回的数据，使用table filter条件做最后的过滤。</li></ul></li></ol></blockquote><hr><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><h4 id="结构特征"><a href="#结构特征" class="headerlink" title="结构特征"></a>结构特征</h4><blockquote><ol><li>有序,B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li><li>B+树的所有数据，均存储在B+树的叶节点</li><li>B+树叶节点的所有页面，通过双向链表链接起来</li></ol></blockquote><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><blockquote><ul><li>支持范围查找，所以需要有序 </li><li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数。</li><li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li><li>B+树的所有数据，均存储在B+树的叶节点  </li></ul></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><ul><li>mysql的B+树会在大量的<strong>随机io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响整体查询修改效率。</li><li>每次的页分裂会导致本页面的空间利用率下降，使得空间利用率向50%靠近。 </li></ul></blockquote><hr><h3 id="LSM树"><a href="#LSM树" class="headerlink" title="LSM树"></a>LSM树</h3><p>LSM（Log-Structured Merge-Trees）与B+树相比，牺牲了部分读的性能来换取写的性能(通过批量写入)。 Hbase、LevelDB、rocksDB采用 LSM 树的结构。LSM可以快速建立索引。</p><h4 id="结构特征-1"><a href="#结构特征-1" class="headerlink" title="结构特征"></a>结构特征</h4><p>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><blockquote><ul><li>lsm数是基于 </li><li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数</li><li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li><li>B+树的所有数据，均存储在B+树的叶节点  </li></ul></blockquote><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><blockquote><ul><li>mysql的B+树会在大量的随机<strong>io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响查询效率。</li><li>每次的页分裂会导致页面的空间利用率下降到50% </li></ul></blockquote><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><blockquote><ul><li>布隆过滤器代替二分法查找</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> mysql </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁究竟应该怎么实现？</title>
      <link href="/2019/01/22/jiu-jing-ying-gai-zen-me-shi-xian-fen-bu-shi-suo/"/>
      <url>/2019/01/22/jiu-jing-ying-gai-zen-me-shi-xian-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://ww1.sinaimg.cn/large/006Cwrd9gy1fzfs9sj3xkj31hc0u07de.jpg" alt=""></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前几天突然接到任务说要实现一个分布式锁，由于之前有自己实现过一些demo，对各种分布式锁也都有一定的了解，<br>实现的时候会数量一些，但是毕竟是公司直接要拿来用的东西，反复斟酌后才把初期的方案定了下来。</p><h3 id="常用的分布式锁简介"><a href="#常用的分布式锁简介" class="headerlink" title="常用的分布式锁简介"></a>常用的分布式锁简介</h3><p>基于redis的分布式锁</p><ul><li>使用setNX的方式</li><li>直接使用redis官方的redission已经实现好的redLock</li></ul><p>基于zookeeper的分布式锁</p><ul><li>利用zookeeper的顺序临时节点，自旋比较自己的节点是否是节点里的最小值，来获得锁。</li></ul><p>基于etcd的分布式锁</p><ul><li>原理与zookeeper类似</li></ul><h3 id="基于redis分布式锁的具体方案及细节"><a href="#基于redis分布式锁的具体方案及细节" class="headerlink" title="基于redis分布式锁的具体方案及细节"></a>基于redis分布式锁的具体方案及细节</h3>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流方案对比</title>
      <link href="/2019/01/21/xian-liu-fang-an-dui-bi/"/>
      <url>/2019/01/21/xian-liu-fang-an-dui-bi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="广为流传的接口限流方案"><a href="#广为流传的接口限流方案" class="headerlink" title="广为流传的接口限流方案"></a>广为流传的接口限流方案</h2><h3 id="漏斗桶"><a href="#漏斗桶" class="headerlink" title="漏斗桶"></a>漏斗桶</h3><p>如果将请求比作是水，水来了都先放进桶里，并以限定的速度出水，桶满会溢出，体现为拒绝服务。<br>漏斗有一个进水口和一个出水口，出水口以一定速率出水，并且有一个最大出水速率。<br>在漏斗中没有水的时候，</p><ul><li>如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，不会积水</li><li>如果进水速率大于最大出水速率，漏斗会以最大速率出水，此时，多余的水会积在漏斗中<br>在漏斗中有水的时候</li><li>出水口以最大速率出水</li><li>如果漏斗未满，且有进水的话，那么这些水会积在漏斗中</li><li><p>如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外<br><img src="http://ww1.sinaimg.cn/large/006Cwrd9ly1fy4wszq4y5j31hc0u0thv.jpg" alt=""></p><h3 id="桶令牌"><a href="#桶令牌" class="headerlink" title="桶令牌"></a>桶令牌</h3><p>对于很多应用场景来说，其实除了要求能够限制数据的平均传输速率外，还要应该求允许某种程度的突发传输。那么漏桶算法就无法满足，令牌桶算法更为适合。<br>令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；<br>当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。</p><h4 id="RateLimiter-用法"><a href="#RateLimiter-用法" class="headerlink" title="RateLimiter 用法"></a>RateLimiter 用法</h4><h4 id="google的guava包"><a href="#google的guava包" class="headerlink" title="google的guava包"></a><a href="https://github.com/google/guava">google的guava包</a></h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 测试一下</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ListeningExecutorService executorService <span class="token operator">=</span> MoreExecutors<span class="token punctuation">.</span><span class="token function">listeningDecorator</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 指定每秒放1个令牌</span>          RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 请求RateLimiter, 超过permits会被阻塞</span>              <span class="token comment" spellcheck="true">//acquire(int permits)函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回</span>                Double acquire <span class="token operator">=</span> null<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"获取令牌成功，获取耗："</span> <span class="token operator">+</span> acquire <span class="token operator">+</span> <span class="token string">" 第 "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" 个任务执行"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      String str<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>acquire函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回<br>一个RateLimiter主要定义了发放permits的速率。如果没有额外的配置，permits将以固定的速度分配，单位是每秒多少permits。默认情况下，Permits将会被稳定的平缓的发放。</p><h3 id="令牌桶算法VS漏桶算法"><a href="#令牌桶算法VS漏桶算法" class="headerlink" title="令牌桶算法VS漏桶算法"></a>令牌桶算法VS漏桶算法</h3><p>漏桶</p></li><li>漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。<br>令牌桶</li><li>生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。</li></ul><h2 id="还有那些简单易懂的"><a href="#还有那些简单易懂的" class="headerlink" title="还有那些简单易懂的?"></a>还有那些简单易懂的?</h2><p>限流方案有很多他们有各自的使用场景，下面看两个有关key的限流</p><h3 id="环形窗口"><a href="#环形窗口" class="headerlink" title="环形窗口"></a>环形窗口</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>用定时任务维护一个环，头结点走完一周的时间是指定的窗口时间</li><li>每次访问key或者接口的时候见时间戳放入环内，头结点碰到的节点都会充值<br>####</li><li>优势可以异步维护各自的key的访问量，而不用主线程每次去判断</li><li><h3 id="定制窗口"><a href="#定制窗口" class="headerlink" title="定制窗口"></a>定制窗口</h3></li><li>每次请求记录时间戳，查看当前窗口内的节点数目，并将窗口外的节点删除</li><li>每次请求先该key对应的节点数量少于指定的可以直接进入请求</li><li>代码简单逻辑清晰容易实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC 源码自探</title>
      <link href="/2019/01/17/springmvc-yuan-ma-zi-tan/"/>
      <url>/2019/01/17/springmvc-yuan-ma-zi-tan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="springMVC-源码自探"><a href="#springMVC-源码自探" class="headerlink" title="springMVC 源码自探"></a>springMVC 源码自探</h2><p><img src="http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg" alt="I love it when a plan comes together."></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>弄清楚springMVC流程对我们写rest接口有莫大的好处，因为和它绑定在一起的还有这些重要的东西：</p><blockquote><ol><li>http/https的知识。http请求的组成。</li><li>消息转化(参数是<strong>如何解析</strong>的，<strong>什么时候解析</strong>的，我们给常用的注解是如何实现的)</li><li>springMVC拦截器的实现原理</li><li>其他，如消息监控的植入actuator,zipkin等。</li></ol></blockquote><h3 id="spring的启动"><a href="#spring的启动" class="headerlink" title="spring的启动"></a>spring的启动</h3><blockquote><p>spring启动的时候会扫描各个controller，并默认以单例的形式生成各个handler(controller类),handlerMethod().</p></blockquote><h3 id="一个rest请求的到来"><a href="#一个rest请求的到来" class="headerlink" title="一个rest请求的到来"></a>一个rest请求的到来</h3><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><blockquote><p>如果入口是从最开始说的话其实是从tomcat的各个过滤器(filter)顺序调用过来的，再由httpServlet拉起springMVC框架的service方法<br>确定方法类型后执行doPost，或者doGet。下面只会会将几个重要过程领出来聊一聊</p></blockquote><h4 id="DispatcherServlet-doDispatch"><a href="#DispatcherServlet-doDispatch" class="headerlink" title="DispatcherServlet.doDispatch()"></a>DispatcherServlet.doDispatch()</h4><blockquote><p>先从10个handlerMappings中的找到对应的handlerMapping,然后从这个handlerMapping通过urlPath，找到对应方法的handler<br> 并将拦截器加入handler组装成HandlerExecutionChain，如果执行HandlerExecutionChain的时候拦截器返回false方法会在止到这里直接返回。<br> 拦截器如果通过，找到能够使用这个handler(Method Handler)的handlerAdapter（一般是这个:RequestMappingHandlerAdapter）（原本有三个找到对应的支持的）<br> 供以后使用，也就是下面的这个方法：</p></blockquote><h4 id="ServletInvocableHandlerMethod-invokeAndHandle"><a href="#ServletInvocableHandlerMethod-invokeAndHandle" class="headerlink" title="ServletInvocableHandlerMethod.invokeAndHandle()"></a>ServletInvocableHandlerMethod.invokeAndHandle()</h4><blockquote><p>执行里面的方法，并处理返回值<br> a. 设置响应状态，<br> b. 设置mavContainer处理状态设置为未处理完毕。<br> c. 并对返回接口进行处理,responseBody的注解会在这里使用(用于找到返回值的handler)，并进行消息转化(json)</p></blockquote><h4 id="InvocableHandlerMethod-invokeForRequest"><a href="#InvocableHandlerMethod-invokeForRequest" class="headerlink" title="InvocableHandlerMethod.invokeForRequest()"></a>InvocableHandlerMethod.invokeForRequest()</h4><blockquote><p>这里会解析并映射入参，这里会有各种解析参数的解析器，找到对应的解析器后然后会根据参数名字到request里面取值。<br>后放入到对应的参数列表里面再将参数放入代理方法执行invoke，并返回业务代码里的返回值。<br>springMVC的字段名在request里面是这样的：如果是get方法一般就是上面的parameterMap里面的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式.四</title>
      <link href="/2018/12/19/she-ji-mo-shi-si/"/>
      <url>/2018/12/19/she-ji-mo-shi-si/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="13-状态模式state"><a href="#13-状态模式state" class="headerlink" title="13.状态模式state"></a>13.状态模式state</h3><ul><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="14-策略模式"><a href="#14-策略模式" class="headerlink" title="14.策略模式"></a>14.策略模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="15-代理模式"><a href="#15-代理模式" class="headerlink" title="15.代理模式"></a>15.代理模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="16-代理模式"><a href="#16-代理模式" class="headerlink" title="16.代理模式"></a>16.代理模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式.三</title>
      <link href="/2018/12/18/she-ji-mo-shi-san/"/>
      <url>/2018/12/18/she-ji-mo-shi-san/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="9-观察者模式"><a href="#9-观察者模式" class="headerlink" title="9.观察者模式"></a>9.观察者模式</h3><ul><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="10-原型模式Prototype"><a href="#10-原型模式Prototype" class="headerlink" title="10.原型模式Prototype"></a>10.原型模式Prototype</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="11-外观模式"><a href="#11-外观模式" class="headerlink" title="11.外观模式"></a>11.外观模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="12-迭代器模式"><a href="#12-迭代器模式" class="headerlink" title="12.迭代器模式"></a>12.迭代器模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式.二</title>
      <link href="/2018/12/17/she-ji-mo-shi-er/"/>
      <url>/2018/12/17/she-ji-mo-shi-er/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>接着一继续</p><h3 id="5-构建者模式Builder"><a href="#5-构建者模式Builder" class="headerlink" title="5.构建者模式Builder"></a>5.构建者模式Builder</h3><ul><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="6-模板方法Template"><a href="#6-模板方法Template" class="headerlink" title="6.模板方法Template"></a>6.模板方法Template</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="7-责任链模式"><a href="#7-责任链模式" class="headerlink" title="7.责任链模式"></a>7.责任链模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="8-代理模式"><a href="#8-代理模式" class="headerlink" title="8.代理模式"></a>8.代理模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式.一</title>
      <link href="/2018/12/16/she-ji-mo-shi-yi/"/>
      <url>/2018/12/16/she-ji-mo-shi-yi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>设计模式，对于一直写业务代码的人来说可能几乎涉及不到，其实也是，因为他是<strong>设计</strong>模式，肯定是用来设计的啊，写业务代码设计个啥，那肯定都是设计框架这样的才用到的嘛。<br>设计模式其本身也是前人大牛总结的宝贵经验，要想写出厉害的代码肯定得站在巨人肩上了，我就我个人碰到的一些设计模式的典型例子来做一个总结，以便以后自己温习。</p><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>就我自己而言我一直觉得这是一个大家都知道的设计模式，但是要将这个设计模式弄明白其实还是的花点时间，而且还得有点功底才可以的。</p><ul><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2.工厂模式"></a>2.工厂模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="3-配置器模式"><a href="#3-配置器模式" class="headerlink" title="3.配置器模式"></a>3.配置器模式</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre><h3 id="4-构建者模式Builder"><a href="#4-构建者模式Builder" class="headerlink" title="4.构建者模式Builder"></a>4.构建者模式Builder</h3></li><li>概念：</li><li>应用：</li><li>注意点：<br>实操:<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// todo</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickSort Application in java</title>
      <link href="/2018/11/25/jdk-de-kuai-su-pai-xu/"/>
      <url>/2018/11/25/jdk-de-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg" alt="I love it when a plan comes together."></p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p><strong>对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。<br>而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.</strong></p><blockquote><p>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。本文需要对基本算法有一点了解才会容易看懂些，特别是快排。</p></blockquote><h3 id="涉及的算法"><a href="#涉及的算法" class="headerlink" title="涉及的算法"></a>涉及的算法</h3><ol><li>插入排序(之前有用binary insertion,既二分法找到插入点后copy)</li><li>归并排序</li><li>快速排序<ul><li>单轴双切分快排序(带等号)</li><li>双轴三切分快排</li></ul></li><li>计数排序(用于数值范围小的情况，byte，short，char类型的时候)</li><li>timSort(用于分析本身排序情况)</li></ol><h3 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h3><p>尽量发掘各自单一排序算法自己优势，当有合适条件的时候就使用对应的基本排序，并穿插一些实用的优化：</p><ol><li>小数据量：插入排序</li><li>适中：快速排序<ul><li>结合插入排序</li><li>划分区间的时候，带等号使用单轴快排，否则双轴快排</li><li>递归调用自己 </li></ul></li><li>大量：先分用timSort分析数据本身排序状况，<ul><li>衡量指标：run(单调升降序长度)和runs(归并次数)</li><li>满足对应的常量要求就用归并，否则就用快排</li></ul></li></ol><h3 id="具体代码-jdk1-8-对int-排序"><a href="#具体代码-jdk1-8-对int-排序" class="headerlink" title="具体代码(jdk1.8#对int[]排序)"></a>具体代码(jdk1.8#对int[]排序)</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 将给定区间数组排序，如果可以的话使用归并排序     */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span>                         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> work<span class="token punctuation">,</span> <span class="token keyword">int</span> workBase<span class="token punctuation">,</span> <span class="token keyword">int</span> workLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对于数据量少的直接使用快排</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> QUICKSORT_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 286</span>                <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 基于插入，单双轴的快排见下面</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*  timSort分析数据排序情况， run[i]是第i个run的开始             *  一个run是一节单调区间(升序或者降序)             */</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>MAX_RUN_COUNT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> run<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> run<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// </span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 降序</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lo <span class="token operator">=</span> run<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>lo <span class="token operator">&lt;</span> <span class="token operator">--</span>hi<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 相等</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> MAX_RUN_LENGTH<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等号多了直接将这里短丢到快排里面</span>                            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">==</span> MAX_RUN_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 目前MAX_RUN_COUNT = 67</span>                    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 基于插入，单双轴的快排见下面</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长</span>            <span class="token comment" spellcheck="true">// ...... 归并</span>            <span class="token comment" spellcheck="true">// 结束</span>        <span class="token punctuation">}</span></code></pre><p>下面是<strong>核心快排</strong>(有点长)我梳理下：</p><ol><li>小范围的用插入排序结束对应区间的排序，跳过</li><li>切分数组成6个区间（不是等分），中间有五个点，排好序</li><li>判断这五个点有没有相等的<ul><li>有：双轴三切分<ul><li>前后部分直接递归（转到第一步）</li><li>如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）</li></ul></li><li>没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）</li></ul></li></ol><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Sorts the specified range of the array by Dual-Pivot Quicksort.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">boolean</span> leftmost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用插入排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> INSERTION_SORT_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// INSERTION_SORT_THRESHOLD = 47</span>            <span class="token comment" spellcheck="true">// 左边是否是最大</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftmost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 普通的插入排序</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> ai <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">--</span> <span class="token operator">==</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ai<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 跳过最长升序                 */</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 * 这里也不是普通的的插入排序，                 * 使用的是双元素插入法更优。                 */</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token operator">++</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token operator">++</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> a1 <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">&lt;</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span> a1 <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a1 <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span><span class="token operator">++</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a2 <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> last <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>last <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token operator">--</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    a<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                a<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1</span>        <span class="token keyword">int</span> seventh <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 各个等分点</span>        <span class="token keyword">int</span> e3 <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The midpoint</span>        <span class="token keyword">int</span> e2 <span class="token operator">=</span> e3 <span class="token operator">-</span> seventh<span class="token punctuation">;</span>        <span class="token keyword">int</span> e1 <span class="token operator">=</span> e2 <span class="token operator">-</span> seventh<span class="token punctuation">;</span>        <span class="token keyword">int</span> e4 <span class="token operator">=</span> e3 <span class="token operator">+</span> seventh<span class="token punctuation">;</span>        <span class="token keyword">int</span> e5 <span class="token operator">=</span> e4 <span class="token operator">+</span> seventh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用插入排序将这些点快速排好序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Pointers</span>        <span class="token keyword">int</span> less  <span class="token operator">=</span> left<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The index of the first element of center part</span>        <span class="token keyword">int</span> great <span class="token operator">=</span> right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The index before the first element of right part</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取第二和第四点为轴</span>            <span class="token keyword">int</span> pivot1 <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pivot2 <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 找到开始和结束向中间靠拢的合适下标</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>less<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 双轴三切分排序</span>            <span class="token comment" spellcheck="true">/*             *   left part           center part                   right part             * +--------------------------------------------------------------+             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  > pivot2  |             * +--------------------------------------------------------------+             *               ^                          ^       ^             *               |                          |       |             *              less                        k     great             */</span>            outer<span class="token operator">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part</span>                    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">></span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to right part</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>great<span class="token operator">--</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span> outer<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] &lt;= pivot2</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                        a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token operator">++</span>less<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pivot1 &lt;= a[great] &lt;= pivot2</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Swap pivots into their final positions</span>            a<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> a<span class="token punctuation">[</span>less  <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>less  <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pivot1<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pivot2<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 前后切分，递归</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> less <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> leftmost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> great <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*              * 如果中间长度大于 length 4/7 的长度             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>less <span class="token operator">&lt;</span> e1 <span class="token operator">&amp;&amp;</span> e5 <span class="token operator">&lt;</span> great<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*                 *   left part         center part                  right part                 * +----------------------------------------------------------+                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |                 * +----------------------------------------------------------+                 *              ^                        ^       ^                 *             less                      k     great                 */</span>                outer<span class="token operator">:</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                        a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                        <span class="token operator">++</span>less<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to right part</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>great<span class="token operator">--</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">break</span> outer<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] &lt; pivot2</span>                            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                            a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> pivot1<span class="token punctuation">;</span>                            <span class="token operator">++</span>less<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pivot1 &lt; a[great] &lt; pivot2</span>                            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                        <span class="token operator">--</span>great<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 中间递归</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> less<span class="token punctuation">,</span> great<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 单轴快排</span>            <span class="token keyword">int</span> pivot <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             *   left part    center part              right part             * +-------------------------------------------------+             * |  &lt; pivot  |   == pivot   |     ?    |  > pivot  |             * +-------------------------------------------------+             *              ^              ^        ^             *             less            k      great             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part</span>                    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[k] > pivot - Move a[k] to right part</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token operator">--</span>great<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] &lt;= pivot</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                        a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token operator">++</span>less<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] == pivot</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * 双切分，递归             */</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> leftmost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ol><li>数据量小(n&lt;47)：使用插入排序</li><li>数据量大(n&gt;286)：且符合归并排序的指标(run&lt;33,runs&lt;67)就用归并</li><li>别的时候都是使用快排递归解决</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
