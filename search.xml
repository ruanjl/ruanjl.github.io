<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dubbo.xml的占位符无法接受任何值？</title>
      <link href="/2019/09/25/dubbo-xml-de-zhan-wei-fu-wu-fa-jie-shou-ren-he-zhi/"/>
      <url>/2019/09/25/dubbo-xml-de-zhan-wei-fu-wu-fa-jie-shou-ren-he-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近负责改造公司的老项目到新的技术栈(springboot2.0X)的时候遇到了一个特别尴尬的问题，就是dubbo的配置文件无法使用占位符来注入,这样会导致无论测试还是生产，每次发版的时候都需要改一下，很显然，这样特别不优雅。</p><h3 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h3><p>终于等到项目整合的末期只剩这个不算bug的bug了，我下定决心打算解决它，于是探索之旅开始了，先是一番老操作：一顿百度google，结果是：只看到有相同提问的却没有一个解答的。 (百度出来也不会写博客了)</p><h3 id="springFramework3-1和springboot的对于占位符解析的区别"><a href="#springFramework3-1和springboot的对于占位符解析的区别" class="headerlink" title="springFramework3.1和springboot的对于占位符解析的区别."></a>springFramework3.1和springboot的对于占位符解析的区别.</h3><p>由于最近也在看spring源码这一块的东西，刚好用上了，老系统springFramework在启动的时候是先读取xml配置文件,<br>接着读取properties文件，并解析占位符，然后才会开始注册beanDefinitions,在实例化之前属性其实就已经解析完了。<br>实例化接着初始化复制后连接注册中心,然后开始的其他操作。<br>而springboot官方文档里面有这样一段话：</p><blockquote><p>Caution<br>While using @PropertySource on your @SpringBootApplication may seem to be a<br>convenient and easy way to load a custom resource in the Environment, we do not recommend<br>it, because Spring Boot prepares the Environment before the ApplicationContext is<br>refreshed. Any key defined with @PropertySource is loaded too late to have any effect on auto configuration.</p></blockquote><p><strong>也就是说@propertySource 注解起作用的时候太晚了</strong>，不能对auto configuration 起到作用。 我也想通过在yml里面写对应的属性值，但是我发现当springboot去加载xml bean的parse后registry的时候并不会对占位符进行解析 也就是beanDefinition里面就还是原来的占位符的字符串：而springFramework同一个时候是已经解析了的 好在spring可以在beanDefinition实例化之前支持扩展beanDefinition也就是实现接口 BeanDefinitionRegistryPostProcessor;这里有两个方法,我们需要实现的是这个接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Extension to the standard {@link BeanFactoryPostProcessor} SPI, allowing for * the registration of further bean definitions &lt;i>before&lt;/i> regular * BeanFactoryPostProcessor detection kicks in. In particular, * BeanDefinitionRegistryPostProcessor may register further bean definitions * which in turn define BeanFactoryPostProcessor instances. * * @author Juergen Hoeller * @since 3.0.1 * @see org.springframework.context.annotation.ConfigurationClassPostProcessor */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Modify the application context's internal bean definition registry after its     * standard initialization. All regular bean definitions will have been loaded,     * but no beans will have been instantiated yet. This allows for adding further     * bean definitions before the next post-processing phase kicks in.     * @param registry the bean definition registry used by the application context     * @throws org.springframework.beans.BeansException in case of errors     */</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>我们可以通过这个接口来覆盖对应的值，在beanDefinition被实例化之前将对应的值从Environment取出来，然后将address,group这两个值覆盖即可，也就是：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboRegistryOverride</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">,</span> EnvironmentAware <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Environment ENV<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ENV <span class="token operator">=</span> environment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        BeanDefinition registryConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"com.alibaba.dubbo.config.RegistryConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里直接取到yml里面的properties的值即可</span>        String address <span class="token operator">=</span> ENV<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"dubbo.address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String group <span class="token operator">=</span> ENV<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"dubbo.group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MutablePropertyValues propertyValues <span class="token operator">=</span> registryConfig<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 覆盖对应key的值</span>        propertyValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>        propertyValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>解决这个问题其实走了挺多弯路的，特别是最开始百度的时候，没什么思路，随着对问题的一步一步的探究，也找到了解答的方向，最终找到了答案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这下百度(google)不到了吧</title>
      <link href="/2019/09/12/hao-liao-zhe-xia-bai-du-bu-dao-liao-zen-me-ban/"/>
      <url>/2019/09/12/hao-liao-zhe-xia-bai-du-bu-dao-liao-zen-me-ban/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我想说"><a href="#我想说" class="headerlink" title="我想说"></a>我想说</h3><p>突然觉得作为一名程序员要面对的东西好多啊,不仅要时刻学习日新月异新的技术栈,还要兼顾老的技术，维护项目， 这不公司技术栈的迁移变更遇到了一堆问题，不知道是不幸还是有幸，这个活落到我头上了。况且我对这个项目一点不了解， 可是没有可是，必须解决它。</p><h3 id="升级到springCloud-问题的由来"><a href="#升级到springCloud-问题的由来" class="headerlink" title="升级到springCloud(问题的由来)"></a>升级到springCloud(问题的由来)</h3><p>将原有的服务改造并引入到springCloud的技术栈(本以为已经轻车熟路了)，这个简单，配置配好，版本对应好，将jar包的冲突解决后就没啥问题了， 由于之前都是改造的jar服务，可是这次改造的项目是web项目，也就是war包，本来改造好后，<strong>本地验证成功</strong>，写好Dockerfile镜像， 以为可以完好运行的并部署的。但是一部署上去docker日志里面就一直报这个错误：</p><blockquote><p>Error starting Tomcat context. Exception: org.springframework.beans.factory.BeanCreationException. Message:<br>Error creating bean with name ‘servletEndpointRegistrar’ defined in class path resource<br>[org/springframework/boot/actuate/autoconfigure/endpoint/web/<br>ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]:<br>Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException:<br>Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]:<br>Factory method ‘servletEndpointRegistrar’ threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException:<br>Error creating bean with name ‘bindingsEndpoint’ defined in class path resource [org/springframework/cloud/stream/config/BindingsEndpointAutoConfiguration.class]:<br>Unsatisfied dependency expressed through method ‘bindingsEndpoint’ parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException:<br>Error creating bean with name ‘inputBindingLifecycle’ defined in class path resource [org/springframework/cloud/stream/config/BindingServiceConfiguration.class]:<br>Unsatisfied dependency expressed through method ‘inputBindingLifecycle’ parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException:<br>Error creating bean with name ‘org.springframework.cloud.bus.SpringCloudBusClient’:</p></blockquote><p>我一直怀疑是不是war包用java -jar *.war命令启动项目导致的。<strong>因为本地可以启动成功，但是docker里面启动却报tomcat启动异常</strong>，有点郁闷，看看问题究竟是出在那里。</p><h3 id="常规解"><a href="#常规解" class="headerlink" title="常规解"></a>常规解</h3><ol><li>按惯例，拿到报错现场的看看是否包含本地项目代码的堆栈，或者什么常规配置的占位符，依赖等等的常见问题，很显然没有， 看了下maven树，也不是什么找不到xxx class的maven冲突的问题而且报的错误我也没见过，(开始有点慌了,因为本地都是可启动起来的呀)</li><li>于是按着惯例的第二步，拿着最精确的报错信息去百度,百度不到再google,各种各样有一点关联的报错信息等我都搜索了一下,看了很多博客都没有找到相关的信息。怎么办？</li></ol><h3 id="冷静解"><a href="#冷静解" class="headerlink" title="冷静解"></a>冷静解</h3><p>直到我开始觉得百度google没什么意义了，索性放弃搜索了，求自己吧，由于对spring和springboot，还有springCloud的原理和启动过程有一定的了解，尝试着自己冷静的分析看问题究竟出在哪里：</p><ul><li>第一步：看项目是启动到那个地方出的问题，前面的都完成了那些操作，(已经完成的工作有：能够找到注册中心，并且可以拉取配置)</li><li>第二步：查看问题是出在哪一步，是启动tomcat context的时候出的问题，仔细查看堆栈信息，将各个报错的信息依次排开依逐个次分析排除，分析堆栈链。</li><li>第三步：注意到项目是自动配置的时候实例化ServletEndpointRegistrar时候出错的，而这个错误原因是一直追究到创建SpringCloudBusClient时候出的问题，于是我找到cloudBus消息总线的包这看看，发现这里有一些包被排除掉了。</li><li>第四步: 尝试着将这整个jar包去掉，因为这个jar主要是用来作为消息总线通知配置变更的，去掉后发现报错信息变化了，这次是另外一个错误，这说明确实是找到点子上了，于是再按照相同的方法又走了一遍，又发现了一个配置了缺没有用的jar包。</li><li>第五步：本地验证启动完好，部署，启动，查看日志启动完好。然后再自己将各个缺失的配置重新配了一遍，解决了下包冲突后，本地和远程部署都可以了。访问也是正常的，至此问题解决了。</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>虽然问题解决了，但是有一个大大问号：为什么本地可以启动而部署到docker里面使用java -jar xxx.war的方式启动却会报错呢？ 我也还在继续找这个问题的答案，到时候会公布出来。不过通过这个案例，我们可以发现得到一些启发：springboot的项目里面没事不要乱加一些jar包或者排除 这会导致springboot 的autoConfigure自动配置一些相关的组件导致不可预测的错误，特别是但是对一个项目完全未知的时候。当然了，出错了也大可按照我这种方式来去排除错误啦！一般到最后也就只会是一些jar包和配置的问题。主要是通过堆栈信息找到对应的点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springFramework3.1这样的老版本怎么维护啊？</title>
      <link href="/2019/09/05/springframework3-1-zhe-yang-de-lao-ban-ben-zen-me-wei-hu-a/"/>
      <url>/2019/09/05/springframework3-1-zhe-yang-de-lao-ban-ben-zen-me-wei-hu-a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="能活下来的老项目是宝"><a href="#能活下来的老项目是宝" class="headerlink" title="能活下来的老项目是宝"></a>能活下来的老项目是宝</h3><p>我们不可能一直是使用最新的技术，是项目总会成为过去，而项目能活下来也是不容易的,都是有他的价值的，而这个时候如果让你顶上去维护老项目你能行么。</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最近由于技术栈的变更, 也就是从activeMq转变为rabbitMQ这一块，项目先是出了一个bug，是有关延时队列的使用：由于rabbiMq的延时队列是使用死信队列实现的，而这个队列是一个单向阻塞队列，如果一个延时长的任务先入队，那么后面延时短的任务要等到前面的元素出队列以后才能继续出队。这样会造成后面消息无法按时出队,于是网上搜索了下解决方案，很快就搜索到了，使用一个rabbitMq延时插件可以实现想要的功能，但是问题却也随之来了</p><h3 id="springFramework3-1老项目"><a href="#springFramework3-1老项目" class="headerlink" title="springFramework3.1老项目"></a>springFramework3.1老项目</h3><p>老项目的配置都是使用xml维护的，而网上的解决方案都是基于springboot的解决方案，spring Framework的解决延时队列的方案我是没有找到 于是我只好将对应配置的配置项的xml标签都看了一遍，根本就没有对应解决方案的标签CustomExchange，于是我想着使用@bean 标签去注入，结果发现无法注入， 因为这个spring的版本太低了，于是到<a href="https://docs.spring.io/spring/docs/3.1.1.RELEASE/spring-framework-reference/html/" target="_blank" rel="noopener">官方文档</a> 查看了下相关的资料，发现这个版本是刚刚出 @bean 这个注解的时候，这个时候的这个注解功能还处于特别低级的情况。 因为官方文档上面写的基本都还是在使用xml配置。这个时候是我们熟知的@bean @configuration注解刚刚出道的时候。</p><h3 id="无法注入"><a href="#无法注入" class="headerlink" title="无法注入"></a>无法注入</h3><p>我按照官网的方法使用@configuration 和@bean 去注入，都没法注入bean，启动的时候一直报无法找到factory method异常导致的无法启动，<br>于是我开始仔细看这两个注解目前版本的的功能究竟是什么，结果是这样的：</p><blockquote><p>@configuration注解基本没什么用处,因为你要使用的话的需要用注解扫描的方式启动项目才可以</p></blockquote><p>直到后来我将注意力转移到@bean的使用的时候看到一句话：  </p><blockquote><p>4.12.4 Using the @Bean annotation<br>@Bean is a method-level annotation and a direct analog of the XML <bean> element.<br>The annotation supports some of the attributes offered by <bean>, such as: init-method, destroy-method, autowiring and name.<br>You can use the @Bean annotation in a @Configuration-annotated or in a @Component-annotated class.  </bean></bean></p></blockquote><p>答案在最后面一句上：你也可以使用@Component注解的java类上使用@bean注解，<br>我这样做了之后还是没有注入我想要的自定义的bean，于是我推测既然是基于xml扫描的配置启动是不是还要在xml里面声明一下这个java类，<br>声明之后终于可以按预期run起来了。而且可以完好的依赖成功后运行处想要的效果，到此，终于解决了这个问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然最后的解决方案，看上去还是比较简单的，但是总不可能凭空产生这样的结果，当我们网上搜索不到答案的时候，也要冷静来认真分析问题，<br>不要仅限于当前springboot的如此方便的技术，还要知道对应原理，历史来源，这样才不至于遇到baidu或者google不到的问题就放弃了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> springFramework3.1 </tag>
            
            <tag> rabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的正则:带你获取你想要的各种数据</title>
      <link href="/2019/08/18/qiang-da-de-zheng-ze-dai-ni-huo-qu-ni-xiang-yao-de-ge-chong-shu-ju/"/>
      <url>/2019/08/18/qiang-da-de-zheng-ze-dai-ni-huo-qu-ni-xiang-yao-de-ge-chong-shu-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>作为程序员，爬虫虽然强大，但是记得规范自己的行为，不要做违法的事情。</p><h3 id="普通的标签爬取"><a href="#普通的标签爬取" class="headerlink" title="普通的标签爬取"></a>普通的标签爬取</h3><p>普通的标签爬取是最基本的爬取工作直接复制粘贴就可以拿到自己想要的数据了，<br>但是很多网站并不会然你这么轻松的就获取到它的数据，很多网站爬取的时候就只是一堆js字符串，我们并不能通过标签拿到<br>对应的数据。这种情况写就需要要我们拿出最厉害的杀手锏了：正则！</p><h3 id="正则的威力"><a href="#正则的威力" class="headerlink" title="正则的威力"></a>正则的威力</h3><p>网页一般都会有他么自己的特点，我们需要做的就是分析它的特点，拿到对应的链接或者内容，但是有一些网站渲染的时候我们拿不到对应的html，拿到的<br>只是一堆js字符串，这样我们没法通过xpath或者selector去找到我们想要的内容，我们只好使出杀手锏正则了，说到正则我想大多数人的第一映像应该是<br>像号码邮箱这样的校验正则。这只是最基本的应用，厉害的地方就是可以从一堆奇怪的字符串里面提取出自己想要的内容。下面讲两个十分实用的正则。</p><h3 id="贪心与非贪心，反向引用"><a href="#贪心与非贪心，反向引用" class="headerlink" title="贪心与非贪心，反向引用"></a>贪心与非贪心，反向引用</h3><p>利用正则爬取数据的最核心应该就是贪心与非贪心的应用了，因为网页里面有重复的字符串太常见了，我们首先得找出唯一的字符串，一般情况下是使用<strong>非贪心(.*?)</strong><br>来定位到数据的开始再使用<strong>非贪心(.*?)</strong> 定位到数据的结尾，然后使用 <strong>获取匹配</strong>的替换符号($1, $2, $3)将数据提取出来即可。<br>例如我要爬取这段字符串里面的\&lt;img src=”<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">www.baidu.com&quot;</a> alt=”图片链接”> 的链接只需要使用这个正则\&lt;img src=”(.*?)” alt=”图片链接”>然后用  $1替换即可。</p><h3 id="正向预查与反向预查找"><a href="#正向预查与反向预查找" class="headerlink" title="正向预查与反向预查找"></a>正向预查与反向预查找</h3><p>有时候可能有很多种情况都瞒住我们的正则，但是我们只需要和某些字相关的匹配项，我们可以使用预查找，意思就是后面或者前面得是我指定的那些值的匹配项我才需要：<br>例如：aaabbbaaacccaaaddd 如果我只要后面是ccc的那个aaa字符串我们可以使用<br><strong>正向预查</strong>：aaa(?=ccc)来匹配，这个只会匹配第二个aaa，又或者我们只要前面是ccc的那个aaa我们可以使用<br><strong>反向预查</strong>：aaa(?&lt;=ccc)这样会匹配第三个aaa，也就是aaa的左边是ccc的那个aaa。</p><h3 id="来实战一把："><a href="#来实战一把：" class="headerlink" title="来实战一把："></a>来实战一把：</h3><p>比如我爬取一个微博的博文链接，爬取下来的全部都是这样的js字符串：<img src="/images/20190820225155.png" alt=""><br>我没有办法使用xpath或者selector去获取内容，使用正则获取原网页的图片并替换之后获取到如下内容：<br>“<a href="https://wx4.sinaimg.cn/large/76ad419cly1g1f1gxgaiuj20gg088myo.jpg&quot;。" target="_blank" rel="noopener">https://wx4.sinaimg.cn/large/76ad419cly1g1f1gxgaiuj20gg088myo.jpg&quot;。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次生产多线程数据导出bug排查</title>
      <link href="/2019/07/20/ji-yi-ci-sheng-chan-duo-xian-cheng-shu-ju-dao-chu-bug-pai-cha/"/>
      <url>/2019/07/20/ji-yi-ci-sheng-chan-duo-xian-cheng-shu-ju-dao-chu-bug-pai-cha/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="事情由来"><a href="#事情由来" class="headerlink" title="事情由来:"></a>事情由来:</h3><p>同事在写一个数据导出的需求的时候遇到个问题，调用dubbo后没响应，排查后是dubbo数据量多无法传输，<br>于是我用idea的evaluation动态调整了数据量的大小去运行，发现大概要到500条数据左右的时候consumer才能<br>得到响应，后来同事便调整了一下数据量，使用了线程池和callable,future来导出。于是bug开始产生了.  </p><h3 id="发展："><a href="#发展：" class="headerlink" title="发展："></a>发展：</h3><p>同事代码写完后，数据接口调用的时间很长，得有二十来秒吧。由于需求来的<strong>又快又急</strong>，便匆忙上线了，结果第二<br>天使用的时候发现有的时候数据导出不完全正确，bug时有时无的。我开始还没有在意，直到他们一直在那里讨<br>论，而且这个需求已经耽误比较久了，于是想着反正我事情也做完了，我便看一下是什么鬼东西在作怪。</p><h3 id="入手："><a href="#入手：" class="headerlink" title="入手："></a>入手：</h3><p>刚开始看代码的时候是这样的：各种奇怪的逻辑，就不贴上来的，贴上一段主要问题所在的那一段：<br>主要的逻辑是这样的：</p><ol><li>先用查询参数查出数据量,</li><li>然后给每个线程指定一定的分页页数,</li><li>查询后,通过future的get方法拿出来放入到结果中……</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">controller</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/exportExcel"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> String  <span class="token function">exportExcel</span><span class="token punctuation">(</span>QueryParam queryParam<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queryParam<span class="token punctuation">.</span><span class="token function">setIsExport</span><span class="token punctuation">(</span><span class="token string">"export"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PageBo<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> pageBoPage<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> resultList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据数据量控制导出情况</span>        <span class="token keyword">int</span> totalData <span class="token operator">=</span> excelService<span class="token punctuation">.</span><span class="token function">countOfficialMicroBlogPutList</span><span class="token punctuation">(</span>queryParam<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程的个数</span>        <span class="token keyword">int</span> nThread <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每个线程需要处理的页数</span>        <span class="token keyword">int</span> pageEachThread <span class="token operator">=</span> pageTotal<span class="token operator">/</span>nThread <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"每条线程需要查询的页数：[{}]"</span><span class="token punctuation">,</span>pageEachThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> pageEachThread <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pageTotal <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                param<span class="token punctuation">.</span><span class="token function">setPage</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                param<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>                pageBoPage <span class="token operator">=</span> excelService<span class="token punctuation">.</span><span class="token function">getOfficialMicroBlogPutList</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>                resultList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>pageBoPage<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span><span class="token operator">></span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> nThread<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageEachThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ThreadExcel worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadExcel</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> pageEachThread<span class="token punctuation">,</span> param<span class="token punctuation">,</span> excelService<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span> f <span class="token operator">:</span> futures<span class="token punctuation">)</span><span class="token punctuation">{</span>                    resultList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"投放查询导出失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ......其他代码</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExcel</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Integer start<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer rows<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer pageEachThread<span class="token punctuation">;</span>        <span class="token keyword">private</span> QueryParam queryParam<span class="token punctuation">;</span>        <span class="token keyword">private</span> ExcelService excelService<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">ThreadExcel</span><span class="token punctuation">(</span>Integer start<span class="token punctuation">,</span>Integer rows<span class="token punctuation">,</span>Integer pageEachThread<span class="token punctuation">,</span>QueryParam queryParam<span class="token punctuation">,</span> ExcelService excelService<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>rows <span class="token operator">=</span> rows<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pageEachThread <span class="token operator">=</span> pageEachThread<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queryParam <span class="token operator">=</span> queryParam<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>excelService <span class="token operator">=</span> excelService<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> start<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> start <span class="token operator">+</span> pageEachThread<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                param<span class="token punctuation">.</span><span class="token function">setPage</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --------- 这里注意一下</span>                param<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    PageBo<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> pageList <span class="token operator">=</span> excelService<span class="token punctuation">.</span><span class="token function">getOfficialMicroBlogPutList</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>pageList<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可能是同事是写多线程这块写的确实比较少吧，一拿到这块代码感觉改的地方至少有三点了，</p><ol><li>主要是线程池的使用是一方面，</li><li>还有就是<strong>线程安全</strong>的一些问题。</li><li>线程的创建记得只写核心参数不要无用参数。  </li></ol><p><strong>还有，最重要的东西来了，为什么接口有时候数据正确有时候又不正确呢？</strong></p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>前后代码看了看，注意到：<strong>线程的代码有将queryParam</strong>这个参数传入线程里<strong>重新set页</strong>然后数去查询。但是这里可是只有<strong>一个queryParam</strong>对象啊，那么多线程去setPage() 然后交给线程池，你能线程保证自己去拿的时候是自己set的那个分页参数么？显然是有线程安全问题的。线程执行的时候不一定拿到的是自己set的分页参数！</p><p>初步定位到了问题我改善了下这小部分代码(其实可以单独传这个参数来更加直接的解决问题)<br>验证的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/exportExcel"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">exportExcel</span><span class="token punctuation">(</span>QueryParam queryParam<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        param<span class="token punctuation">.</span><span class="token function">setIsExport</span><span class="token punctuation">(</span><span class="token string">"export"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exportLock<span class="token punctuation">)</span><span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> resultList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Long total <span class="token operator">=</span> excelService<span class="token punctuation">.</span><span class="token function">countOfficialMicroBlogPutList</span><span class="token punctuation">(</span>queryParam<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 虽然500条能拉回来但是有的数据比较大，所以就取了100--------------------------------------</span>            params<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> totalPage <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span><span class="token operator">></span> futures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> totalPage<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span> submit <span class="token operator">=</span> taskExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelWorker</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> queryParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                futures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>submit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>>></span> f <span class="token operator">:</span> futures<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    resultList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> ExecutionException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取数据异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//-----------------------------------简洁快速的代码-----------------------------------</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//........</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ExcelWorker</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> page<span class="token punctuation">;</span>        <span class="token keyword">private</span> QueryParam queryParam<span class="token punctuation">;</span>        <span class="token function">ExcelWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> QueryParam queryParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queryParam <span class="token operator">=</span> queryParam<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            QueryParam params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>            params<span class="token punctuation">.</span><span class="token function">setPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只取不变的部分</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PageBo<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> threadPage <span class="token operator">=</span> excelService<span class="token punctuation">.</span><span class="token function">getOfficialMicroBlogPutList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> threadPage<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"分页查询异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先说结果：优化后的代码没有出现数据问题，响应也比较快,2s左右就可以看到表格导出了。完全符合要求了。<br>主要是以下几点改进：</p><ol><li>线程问题，安全这些线程都应该用自己的分页参数去请求，接口所以必须得clone(深度)或者copy一个新的对象才可以。</li><li>worker的优化：只要两个不可缺的关键参数(还有就是copy的任务交给线程，不要让主线程做这么无聊的事情)</li><li>直接交个线程池处理后再去使用Future去取得结果。</li><li>不用去shutdown线程池，如果你是自己创建的线程池，他自己会管理自己，这样会阻塞主线程，导致请求任务十分缓慢。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章对那些大佬是没什么提升的，对于没有接触过多线程，Callable,Future等等的人来说这些东西确实是比较棘手的, 但是只要认真分析出问题的代码行附近，认真分析对比还是比较快速就能得到答案的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> dubbo </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> callable </tag>
            
            <tag> future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术人员有关技能方面的一点感悟</title>
      <link href="/2019/06/01/ji-zhu-ren-yuan-you-guan-ji-neng-fang-mian-de-yi-dian-gan-wu/"/>
      <url>/2019/06/01/ji-zhu-ren-yuan-you-guan-ji-neng-fang-mian-de-yi-dian-gan-wu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名技术人员随着，随着接触的技术越来越多，越来越杂，我便发现要想彻底掌握一项技能，<br>是需要循序渐进有,有理有序的进行，每当接触一门新的技术点的手时候，这几点需要我们值得注意。</p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote><p>初步了解技术，需要知道，东西的概念，与基本知识，由那些东西组成，将一些基本概念映入脑海，以后用的时候就是这些东西了.</p></blockquote><h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><blockquote><p>知道如何去使用,严格的使用步骤是什么，会不会有什么坑，自己去实践一遍，看看用的情况怎么样，测一下，他所说的一些亮点，是不是那么回事。<br>这时候还不能急着去看什么原理啥的，看了有什么用？你能写出来？都还不能用，原理有何用？也就吹吹嘴皮子，干不了实事。</p></blockquote><h2 id="什么时候用？"><a href="#什么时候用？" class="headerlink" title="什么时候用？"></a>什么时候用？</h2><blockquote><p>能用才是开始，但是我们需要知道什么时候用，不是拿来就乱用，要明白这个技能，是用来解决什么问题的，在这期间<br>会涉及到这个东西的优点.他的优点往往就是他的用处。</p></blockquote><h2 id="缺点是什么？"><a href="#缺点是什么？" class="headerlink" title="缺点是什么？"></a>缺点是什么？</h2><blockquote><p>知道什么时候用，还需要知道避免什么时候用，这就是这个东西的缺点，可能用了还不如不用。就拿并发的一些工具类ConcurrentHashMap来说，如果经过逃逸分析，这个map本身就不会逃逸，<br>那你还在用，反而会降低性能，虽然开启jvm的逃逸分析后可能会同步消除，但是稍微复杂点，也消除不了。</p></blockquote><h2 id="原理你知道么？"><a href="#原理你知道么？" class="headerlink" title="原理你知道么？"></a>原理你知道么？</h2><blockquote><p>到目前我们已经知道这个是什么，也知道什么时候该用什么时候不要用，各种优缺点了，这个时候我们最好是去了解他的原理。<br>这个看上去是一个乏味的工作，但是不仅仅对在面试上有用，对我们我们学习一些新的技能也很有帮助，因为很有可能他们的原理就相同或者类似，<br>就像我们记忆单词的词根一样，这还会对之前的那些东西进行进一步升华。就好比我学习并发工具类的源码的时候，发现那些工具类基本都使用aqs来实现他们的同步功能，<br>使用volatile + CAS， 尾插入，等思想。知道这些我们自己都可以不用工具类来实现对应的功能。比如让你不要使用工具类来达到异步转同步，你怎么做？<br>不让我用工具类，那我就像他们一样写不久完事了？声明一个volatile变量，自旋判断即可，但是如果需要考虑性能，可能就要更复杂些了，比如需要响应中断，<br>需要防止饥饿，防止过度消耗cpu，等等。那我们就需要做更多的工作，还要验证自己工具类的实用性。这些的工作量是比较大的。也需要我们队原理了解的更加全面。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊paxos</title>
      <link href="/2019/06/01/liao-liao-paxos/"/>
      <url>/2019/06/01/liao-liao-paxos/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>分布式，里面不得不提的一个分布式算法就paxos了。分布式一致性算法(Consensus Algorithm)是一个分布式计算领域的基础性问题，<br>其最基本的功能是为了在多个进程之间对某个(某些)值达成一致(强一致);进而解决分布式系统的可用性问题(高可用).</p>]]></content>
      
      
      
        <tags>
            
            <tag> paxos </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则完全总结</title>
      <link href="/2019/06/01/zheng-ze-wan-quan-zong-jie/"/>
      <url>/2019/06/01/zheng-ze-wan-quan-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正则的实用与强大勿用多说，不仅平时找文本，替换文本有实用的效果，写代码的格式校验，文本<br>匹配爬虫的文本匹配，重复匹配，都是相当的好用。  </p><blockquote><p>正则前前后后看的遍数有个3,4遍了，这次做一个总结，因为这次基本将所有的东西都纳入进来了。</p></blockquote><h3 id="普通字符与元字符"><a href="#普通字符与元字符" class="headerlink" title="普通字符与元字符"></a>普通字符与元字符</h3><blockquote><p>正则表达式其实就是有两部分组成，普通字符就是我们的字面文字，<br>元字符是用来实现正则功能的文字，就像一个工具字符。如果要匹配元字符这样的字面文本，加个转义就可以了。</p></blockquote><h4 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h4><pre class=" language-regexp"><code class="language-regexp">  String regexp = "123";  String text = "123456"  不加其他元字符，这个就只是匹配 "123"，甚至我都不会以为这个一个正则，只是一个普通的查找。</code></pre><p>普通字符匹配，就是直观的匹配,一般我们需要将某些文本内的独有的，有特征的文本找出来，来供我们进行匹配。普字符是什么就匹配什么。</p><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><blockquote><p>元字符基本就是正则的核心，学习正则就是了解所有的这些元字符，他用所有他定义的元字符来实现它指定的功能。元字符有大致分为6种，用来实现不同的功能。</p></blockquote><h5 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h5><blockquote><p>打印出来不是我们所写的那样的字符,而是定义好了的一些效果的字符。</p></blockquote><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td style="text-align:left">换行符</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:left">回车符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr></tbody></table><p>等等。</p><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><blockquote><p>有特殊含义的功能字符</p></blockquote><table><thead><tr><th style="text-align:center">特殊字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">$</td><td style="text-align:left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配字面 $ 字符本身，使用 \$。</td></tr><tr><td style="text-align:center">( )</td><td style="text-align:left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，使用 \( 和 \)。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">匹配前面的子表达式零次或多次。要匹配字面 <em> 字符，使用 \\</em>。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">匹配前面的子表达式一次或多次。要匹配字面 + 字符，使用 \+。</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，使用 \. 。</td></tr><tr><td style="text-align:center">[</td><td style="text-align:left">标记一个中括号表达式的开始。要匹配 [，使用 \[。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配字面 ? 字符，使用 \?。</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。如，’n’ 匹配’n’。’\n’ 换行符。序列 ‘\‘ 匹配 “\”，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">匹配输入字符串的开始位置，不过在方括号表达式中使用，此时它表示非。要匹配字面 ^ 字符本身，使用 \^。</td></tr><tr><td style="text-align:center">{</td><td style="text-align:left">标记限定符表达式的开始。要匹配 {，使用 \{。</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:left">指明两项之间的一个选择。要匹配 &#124; ，使用 \&#124;。</td></tr></tbody></table><h5 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h5><blockquote><p>用来表示个数的</p></blockquote><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">匹配紧贴前面的单个字母或者表达式0次或多次。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">匹配紧贴前面的单个字母或者表达式1次或多次。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">匹配紧贴前面的单个字母或者表达式0次或1次。</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:left">n 是一个非负整数。匹配确定的 n 次。</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:left">n 是一个非负整数。至少匹配n次。</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">m 和 n 均为非负整数，匹配前面字符或者表达式连续出现n到m次</td></tr></tbody></table><h5 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h5><blockquote><p>表示匹配项和空格，或者换行符的关系</p></blockquote><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:left">非单词边界匹配。</td></tr></tbody></table><h5 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h5><blockquote><p>表示匹配项和旁边字符的关系,分 <strong>分获取匹配和</strong>和<strong>非获取匹配</strong> 配合括号使用</p></blockquote><p>用圆括号将所有选择项括起来的时候，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。<br>其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，<br>后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h5 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h5><blockquote><p>对已经获取到缓冲区的匹配项的引用，最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。<br>和替换功能里面的$1 符号类似。</p></blockquote><p>所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。<br>每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。可以使用非捕获元字符 ?:、?= 或 ?! 来重写捕获，忽略对相关匹配的保存。</p><h3 id="贪心与非贪心"><a href="#贪心与非贪心" class="headerlink" title="贪心与非贪心"></a>贪心与非贪心</h3><blockquote><p>当匹配两个字符中间夹着的匹配项的时候如果有多个匹配项，正则模式使用的是贪心模式，也就是内容匹配最多的那种<br>通过在 *,+ 或 ? 限定符之后放置 ?，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配。</p></blockquote><h3 id="获取与非获取匹配"><a href="#获取与非获取匹配" class="headerlink" title="获取与非获取匹配"></a>获取与非获取匹配</h3><blockquote><p>使用括号的时候会将括号里面的匹配项放入正则的缓冲区域里面(最多99项),这是获取匹配。</p></blockquote><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">(pattern)</td><td style="text-align:left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td style="text-align:center">(?:pattern)</td><td style="text-align:left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (\&#124;) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y\&#124;ies) 就是一个比 ‘industry\&#124;industries’ 更简略的表达式。</td></tr></tbody></table><h3 id="正反向肯定否定预查找"><a href="#正反向肯定否定预查找" class="headerlink" title="正反向肯定否定预查找"></a>正反向肯定否定预查找</h3><table><thead><tr><th style="text-align:left">表达式模板</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">(?=pattern)</td><td style="text-align:left">匹配给定字符后面的字符是括号里面期望项目，如1(?=2),表示匹配1后面是2的1而不是别的，12匹配成功，13匹配失败</td></tr><tr><td style="text-align:left">(?!pattern)</td><td style="text-align:left">匹配给定字符后面的字符不是是括号里面期望项目,如1(?!=2),表示匹配1后面不是2的1，12匹配失败，13匹配成功</td></tr><tr><td style="text-align:left">(?&lt;=pattern)</td><td style="text-align:left">匹配给定字符前面的字符是括号里面期望项目，与上面的类似</td></tr><tr><td style="text-align:left">(?&lt;!pattern)</td><td style="text-align:left">匹配给定字符前面的字符不是是括号里面期望项目，与上面的类似</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读 Designing Data-Intensive Application</title>
      <link href="/2019/02/13/designing-data-intensive-application/"/>
      <url>/2019/02/13/designing-data-intensive-application/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>拜读大佬的书籍，把重点的语句做个笔记。</p></blockquote><hr><p>书本内容：</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><ol><li>近些年的软件工程，特别是服务器端和后端系统开发，大量关于数据存储和处理的时髦词汇涌现出来： <strong>NoSQL！大数据！Web-Scale！分片！最终一致性！<br>ACID！ CAP定理！云服务！MapReduce！实时！</strong></li><li>而<strong>数据密集型应用</strong>（data-intensive applications）正在通过使用这些技术进步来推动可能性的边界。当一个应用被称为<strong>数据密集</strong>型的引用，<br>如果数据是其主要挑战（数据量，数据复杂度或数据变化速度）—— 与之相对的是<strong>计算密集型</strong>，即<strong>处理器速度</strong>是其瓶颈。</li><li>在技术迅速变化的背后总是存在一些持续成立的原则，无论我们使用了特定工具的哪个版本。如果理解了这些原则，就可以领会这些工具的适用场景，如何充分<br>利用它们，以及如何避免其中的陷阱.</li></ol></blockquote><h2 id="第一部分：数据系统的基石"><a href="#第一部分：数据系统的基石" class="headerlink" title="第一部分：数据系统的基石"></a>第一部分：数据系统的基石</h2><ol><li>第一章将介绍本书使用的术语和方法。可靠性，可扩展性和可维护性 ，这些词汇到底意味着什么？如何实现这些目标？</li><li>第二章将对几种不同的数据模型和查询语言进行比较。从程序员的角度看，这是数据库之间最明显的区别。不同的数据模型适用于不同的应用场景。</li><li>第三章将深入存储引擎内部，研究数据库如何在磁盘上摆放数据。不同的存储引擎针对不同的负载进行优化，选择合适的存储引擎对系统性能有巨大影响。</li><li>第四章将对几种不同的 数据编码进行比较。特别研究了这些格式在应用需求经常变化、模式需要随时间演变的环境中表现如何。</li></ol><h3 id="第一章：可靠性可，扩展性，可维护性"><a href="#第一章：可靠性可，扩展性，可维护性" class="headerlink" title="第一章：可靠性可，扩展性，可维护性"></a>第一章：可靠性可，扩展性，可维护性</h3><ul><li>现今很多应用程序都是 <strong>数据密集型（data-intensive）</strong> 的，而非 <strong>计算密集型（compute-intensive）</strong> 的。因此CPU很少成为这类应用的瓶颈，<br>更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：  <ul><li>增加负载参数并保持系统资源（CPU、内存、网络带宽等）不变时，系统性能将受到什么影响？</li><li>增加负载参数并希望保持性能不变时，需要增加多少系统资源？<br>这两个问题都需要性能数据，所以让我们简单地看一下如何描述系统性能。<br>​对于Hadoop这样的<strong>批处理系统</strong>，通常关心的是<strong>吞吐量</strong>（throughput），即每秒可以处理的记录数量，或者在特定规模数据集上运行作业的总时间。<br>对于在线系统，通常更重要的是服务的<strong>响应时间</strong>（response time），即客户端发送请求到接收响应之间的时间。<br>使不断重复发送同样的请求，每次得到的响应时间也都会略有不同。现实世界的系统会处理各式各样的请求，响应时间可能会有很大差异。因此我们需要将<br><strong>响应时间</strong>视为一个可以测量的<strong>数值分布</strong>（distribution），<strong>而不是单个数值</strong></li></ul></li></ul><h3 id="第二章：数据模型与查询语言"><a href="#第二章：数据模型与查询语言" class="headerlink" title="第二章：数据模型与查询语言"></a>第二章：数据模型与查询语言</h3><ul><li>数据模型主要分为两种：<strong>关系模型</strong>(sql,典型的如mysql,oracle)与<strong>文档模型</strong>(noSql[Not Only SQL],典型的如mongo) </li><li>采用NoSQL数据库的背后有几个驱动因素，其中包括：<ul><li>需要比关系数据库更好的可扩展性，包括非常大的数据集或非常高的写入吞吐量</li><li>相比商业数据库产品，免费和开源软件更受偏爱。</li><li>关系模型不能很好地支持一些特殊的查询操作</li><li>受挫于关系模型的限制性，渴望一种更具多动态性与表现力的数据模型</li></ul></li><li>文档和关系数据库的融合:自2000年代中期以来，大多数关系数据库都已经开始支持文档结构：如json，xml格式的数据</li><li>随着时间的推移，关系数据库和文档数据库似乎变得越来越相似，这是一件好事：数据模型相互补充 ，如果一个数据库能够处理类似文档的数据，<br>并能够对其执行关系查询，那么应用程序就可以使用最符合其需求的功能组合。</li><li><p>关系模型和文档模型的混合是未来数据库一条很好的路线。</p></li><li><p>文档数据库有时称为无模式（schemaless），但这具有误导性，因为读取数据的代码通常假定某种结构——即存在隐式模式，但不由数据库强制执行。<br>一个更精确的术语是读时模式（schema-on-read）（数据的结构是隐含的，只有在数据被读取时才被解释），相应的是写时模式（schema-on-write）<br>（传统的关系数据库方法中，模式明确，且数据库确保所有的数据都符合其模式）</p></li><li>模式变更的速度很慢，而且要求停运。它的这种坏名誉并不是完全应得的：大多数关系数据库系统可在几毫秒内执行 ALTER TABLE  语句。<br>MySQL是一个值得注意的例外，它执行 ALTER TABLE  时会复制整个表，这<strong>可能意味着在更改一个大型表时会花费几分钟甚至几个小时的停机<br>时间，尽管存在各种工具来解决这个限制</strong>。</li><li><p>大型表上运行 UPDATE 语句在任何数据库上都可能会很慢，因为每一行都需要重写。要是不可接受的话，应用程序可以将 first_name  设置为默认值 NULL<br>，并在读取时再填充，就像使用文档数据库一样。</p><blockquote><p>SQL是一种声明式查询语言，而IMS和CODASYL使用命令式代码来查询数据库。那是什么意思？许多常用的编程语言是命令式的。例如，给定一个动物物种的列表，<br>返回列表中的鲨鱼可以这样写：<br>function getSharks() {<br>var sharks = [];<br>for (var i = 0; i &lt; animals.length; i++) {<br>if (animals[i].family === “Sharks”) {<br>sharks.push(animals[i]);<br>}<br>}<br>return sharks;<br>}<br>命令式语言告诉计算机以特定顺序执行某些操作。可以想象一下，逐行地遍历代码，评估条 件，更新变量，并决定是否再循环一遍。<br>在声明式查询语言（如SQL或关系代数）中，你只需指定所需数据的模式 - 结果必须符合哪些 条件，以及如何将数据转换（例如，排序，分组和集合）<br>但不是如何实现这一目标。数据库 系统的查询优化器决定使用哪些索引和哪些连接方法，以及以何种顺序执行查询的各个部分。</p></blockquote></li><li><p>声明式查询语言是迷人的，因为它通常比命令式API更加简洁和容易。但更重要的是，它还隐<br>藏了数据库引擎的实现细节，这使得数据库系统可以在无需对查询做任何更改的情况下进行<br>性能提升。  </p></li><li><p>最后，声明式语言往往适合并行执行。现在，CPU的速度通过内核的增加变得更快，而不是<br>以比以前更高的时钟速度运行【31】。命令代码很难在多个内核和多个机器之间并行化，因<br>为它指定了指令必须以特定顺序执行。声明式语言更具有并行执行的潜力，因为它们仅指定<br>结果的模式，而不指定用于确定结果的算法。在适当情况下，数据库可以自由使用查询语言<br>的并行实现</p></li><li><p>我们会研究两大类存储引擎：日志结构（log-structured）的存储引擎，以及面向页面（page-oriented）的存储引擎（例如B树）。</p></li><li>冻结段的合并和压缩可以在后台线程中完成，在进行时，我们仍然可以继续使用旧的段文件来正常提供读写请求。合并过程完成后，我们将读取请求转换为<br>使用新的合并段 而不是旧段然后可以简单地删除旧的段文件。</li><li><strong>简而言之，一些真正实施中重要的问题是:</strong><ul><li><strong>文件格式</strong>:</li><li><strong>删除记录</strong>:</li><li><strong>崩溃恢复</strong>:</li><li><strong>部分写入记录</strong>:</li><li><strong>并发控制</strong>: 乍一看，只有追加日志看起来很浪费：为什么不更新文件，用新值覆盖旧值？但是只能追加设计的原因有几个:<ul><li>追加和分段合并是顺序写入操作，通常比随机写入快得多，尤其是在磁盘旋转硬盘上。</li><li>在某种程度上，顺序写入在基于闪存的固态硬盘（SSD）上也是优选的【4】。我们将在</li><li>第83页的“比较B-树和LSM-树”中进一步讨论这个问题。</li><li>如果段文件是附加的或不可变的，并发和崩溃恢复就简单多了。例如，您不必担心在覆</li><li>盖值时发生崩溃的情况，而将包含旧值和新值的一部分的文件保留在一起。</li><li>合并旧段可以避免数据文件随着时间的推移而分散的问题。  </li></ul></li></ul></li><li>与往常一样，大量的细节使得存储引擎在实践中表现良好。例如，当查找数据库中<strong>不存在的键</strong>时，LSM树算法可能会很慢：您必须检查内存表，然后将这些段一<br>直回到最老的（这可能必须从磁盘读取每一个），然后才能确定键不存在。为了优化这种访问，存储引擎通常使用额外的Bloom过滤器</li><li>布隆过滤器是用于近似集合内容的内存高效数据结构，它可以告诉您数据库中是否出现键，从而为不存在的键节省许多不必要的磁盘读取操作。<br>(布隆过滤有这样的特性：没有那就一定是没有，有，有百分之95%以上的几率是有的，用很小的错误率，和很小的空间获得特别大的效率)</li><li>即使有许多微妙的东西，LSM树的基本思想 —— 保存一系列在后台合并的SSTables —— 简 单而有效。即使数据集比可用内存大得多，它仍能继续正常工作。<br>由于数据按排序顺序存储， 因此可以高效地执行范围查询（扫描所有高于某些最小值和最高值的所有键），并且因 为磁盘写入是连续的，所以LSM树可以支持<br>非常高的写入吞吐量。</li><li>在B树的一个页面中对子页面的引用的数量称为分支因子。例如，在图3-6中，分支因子是 6 。在实践中，分支因子取决于存储页面参考和范围边界所需的空间量，<br>但通常是几百个。</li><li>日志结构化的方法在这方面更简单，因为它们在后台进行所有的合并，而不会干扰传入的查询，并且不时地将旧的分段原子交换为新的分段。</li><li>这种差异在磁性硬盘驱动器上尤其重要，顺序写入比随机写入快得多。</li><li>在许多关系数据库中，事务隔离是通过在键范围上使用锁来实现的，在B树索引中，这些锁可以直接连接到树</li><li>在新的数据存储中，<strong>日志结构化索引</strong>变得越来越流行。没有快速和容易的规则来确定哪种类型的存储引擎对你的场景更好，所以值得进行一些经验上的测试.</li><li>索引中的关键字是查询搜索的内容，但是该值可以是以下两种情况之一：它可以是所讨论的实际行（文档，顶点），也可以是对存储在别处的行的引用。在后一种<br>情况下，行被存储的 地方被称为堆文件（heap file），并且存储的数据没有特定的顺序（它可以是仅附加的，或 者可以跟踪被删除的行以便用新数据覆盖它们后来）</li><li>在聚集索引（在索引中存储所有行数据）和非聚集索引（仅在索引中存储对数据的引用）之间的折衷被称为包含列的索引或覆盖索引，其存储表的一部分在索引内。<br>这允许通过单独使用索引来回答一些查询（这种情况叫做：索引覆盖（cover）了查询）</li><li>某些内存中的键值存储（如Memcached）仅用于缓存，在重新启动计算机时丢失的数据是可 以接受的。但其他内存数据库的目标是持久性，可以通过特殊的硬件<br>（例如电池供电的 RAM），将更改日志写入磁盘，将定时快照写入磁盘或通过复制内存来实现，记忆状态到其他机器。<blockquote><p>诸如VoltDB，MemSQL和Oracle TimesTen等产品是具有关系模型的内存数据库，供应商声称，通过消除与管理磁盘上的数据结构相关的所有开销，<br>他们可以提供巨大的性能改进【41,42】。 RAM Cloud是一个开源的内存键值存储器，具有持久性（对存储器中的数据以及磁盘上的数据使用日志结构化方法）<br>【43】。 Redis和Couchbase通过异步写入磁盘提供了较弱的持久性。</p></blockquote></li></ul><blockquote><p>磁盘的顺序读速度能打到在100MB/S上下使用列式存储，分析的时候，可以只扫描需要的那部分数据的时候，减少CPU和磁盘的访问量。同时面向列的存储通常<br>很适合压缩，使用压缩，可以综合CPU和磁盘，发挥最大的效能。<br>面向行的存储将每一行保存在一个地方（在堆文件或聚簇索引中）<br>在OLTP方面，我们看到了来自两大主流学派的存储引擎： 日志结构学派<br>只允许附加到文件和删除过时的文件，但不会更新已经写入的文件。 Bitcask，SSTables，LSM树，LevelDB，Cassandra，HBase，Lucene等都属于这个组。<br>原地更新学派将磁盘视为一组可以覆盖的固定大小的页面。 B树是这种哲学的最大的例子，被用在所有主要的关系数据库中，还有许多非关系数据库。</p></blockquote><h3 id="第三章：存储与检索"><a href="#第三章：存储与检索" class="headerlink" title="第三章：存储与检索"></a>第三章：存储与检索</h3><blockquote><p>日志结构的存储引擎是相对较新的发展。他们的主要想法是，他们系统地将随机访问写入顺<br>序写入磁盘，由于硬盘驱动器和固态硬盘的性能特点，可以实现更高的写入吞吐量。在完成<br>OLTP方面，我们通过一些更复杂的索引结构和为保留所有数据而优化的数据库做了一个简短<br>的介绍。 然后，我们从存储引擎的内部绕开，看看典型数据仓库的高级架构。这一背景说明了为什么<br>分析工作负载与OLTP差别很大：当您的查询需要在大量行中顺序扫描时，索引的相关性就会<br>降低很多。相反，非常紧凑地编码数据变得非常重要，以最大限度地减少查询需要从磁盘读<br>取的数据量。我们讨论了列式存储如何帮助实现这一目标。<br>作为一名应用程序开发人员，如果您掌握了有关存储引擎内部的知识，那么您就能更好地了<br>解哪种工具最适合您的特定应用程序。 如果您需要调整数据库的调整参数，这种理解可以让<br>您设想一个更高或更低的值可能会产生什么效果。<br>尽管本章不能让你成为一个特定存储引擎的调参专家，但它至少有大概率使你有了足够的概<br>念与词汇储备去读懂数据库的文档，从而选择合适的数据库。</p></blockquote><blockquote></blockquote><ul><li>作为程序员，为什么要关心数据库内部存储与检索的机理？你可能不会去从头开始实现自己的存储引擎，但是你确实需要从许多可用的存储引擎中选择一个合适的。<br>而且为了协调存储引擎以适配应用工作负载，你也需要大致了解存储引擎在底层究竟做什么。</li><li><p>特别需要注意，针对事务性负载和分析性负载优化的存储引擎之间存在巨大差异。稍后我们<br>将在 “事务处理还是分析？” 一节中探讨这一区别，并在 “列存储”中讨论一系列针对分析优化存储引擎。   </p><blockquote><p>世界上最简单的数据库可以用两个Bash函数实现：<br>#!/bin/bash<br>db_set () {<br>echo “$1,$2” &gt;&gt; database<br>}<br>db_get () {<br>grep “^$1,” database | sed -e “s/^$1,//“ | tail -n 1<br>}<br>这两个函数实现了键值存储的功能。执行  db_set key value  ，会将 键（key）和值<br>（value） 存储在数据库中。</p></blockquote></li><li><p>db_set<br>函数对于极其简单的场景其实有非常好的性能，因为在文件尾部追加写入通常是非常高效的。与<br>db_set 做的事情类似，许多数据库在内部使用了日志（log），也就是一个仅追<br>加（append-only）的数据文件。真正的数据库有更多的问题需要处理（如并发控制，回收<br>磁盘空间以避免日志无限增长，处理错误与部分写入的记录），但基本原理是一样的。日志<br>极其有用，我们还将在本书的其它部分重复见到它好几次。</p><blockquote><p>日志（log）这个词通常指应用日志：即应用程序输出的描述发生事情的文本。本书在更<br>普遍的意义下使用日志这一词：一个仅追加的记录序列。它可能压根就不是给人类看<br>的，使用二进制格式，并仅能由其他程序读取。 </p></blockquote></li><li><p>索引背后的大致思想是，保存一些额外的元数据作为路<br>标，帮助你找到想要的数据。如果您想在同一份数据中以几种不同的方式进行搜索，那么你<br>也许需要不同的索引，建在数据的不同部分上。</p></li><li><p>索引是从主数据衍生的附加（additional）结构。许多数据库允许添加与删除索引，这不会影<br>响数据的内容，它只影响查询的性能。维护额外的结构会产生开销，特别是在写入时。写入<br>性能很难超过简单地追加写入文件，因为追加写入是最简单的写入操作。任何类型的索引通<br>常都会减慢写入速度，因为每次写入数据时都需要更新索引。 </p><blockquote><p>这是存储系统中一个重要的权衡：精心选择的索引加快了读查询的速度，但是每个索引都会<br>拖慢写入速度。因为这个原因，数据库默认并不会索引所有的内容，而需要你（程序员或<br>DBA）通过对应用查询模式的了解来手动选择索引。你可以选择能为应用带来最大收益，同<br>时又不会引入超出必要开销的索引。</p></blockquote></li><li><p>哈希索引: 很常见与字典（dictionary）类型非常相似   </p></li><li>所以如何避免最终用完磁盘空间？一种好的解决<br>方案是，将日志分为特定大小的段，当日志增长到特定尺寸时关闭当前段文件，并开始写入<br>一个新的段文件。然后，我们就可以对这些段进行压缩（compaction），如图3-2所示。压<br>缩意味着在日志中丢弃重复的键，只保留每个键的最近更新。</li></ul><blockquote><p>乍一看，只有追加日志看起来很浪费：为什么不更新文件，用新值覆盖旧值？但是只能追加设计的原因有几个：</p><ul><li>追加和分段合并是顺序写入操作，通常比随机写入快得多，尤其是在磁盘旋转硬盘上。</li><li>在某种程度上，顺序写入在基于闪存的固态硬盘（SSD）上也是优选的【4】。我们将在</li><li>第83页的“比较B-树和LSM-树”中进一步讨论这个问题。</li><li>如果段文件是附加的或不可变的，并发和崩溃恢复就简单多了。例如，您不必担心在覆</li><li>盖值时发生崩溃的情况，而将包含旧值和新值的一部分的文件保留在一起。</li><li>合并旧段可以避免数据文件随着时间的推移而分散的问题。 </li></ul></blockquote><blockquote><p>但是，哈希表索引也有局限性：<br> <strong>散列表必须能放进内存</strong>如果你有非常多的键，那真是倒霉。原则上可以在磁盘上保留一个哈希映射，不幸的是 <strong>磁盘哈希映射很难表现优秀</strong>。它需要<br> <strong>大量的随机访问I/O</strong>，当它变<strong>满时增长是很昂贵的</strong>， 并且解决散列冲突需要很多的逻辑 范围查询效率不高。例如，您无法轻松扫描kitty00000<br> 和kitty99999 之间的所有键—您 必须在散列映射中单独查找每个键。 </p></blockquote><h3 id="第四章：编码与演化"><a href="#第四章：编码与演化" class="headerlink" title="第四章：编码与演化"></a>第四章：编码与演化</h3><blockquote><p>本章中将介绍几种编码数据的格式，包括 JSON，XML，Protocol Buffers，Thrift和 Avro。</p></blockquote><ul><li>需要在两种表示之间进行某种类型的翻译。 从内存中表示到字节序列的转换称为编码（Encoding）（也称为序列化（serialization）<br>或编组（marshalling）），反过来称为解码<br>（Decoding） （解析（Parsing），反序列化（deserialization），反编组() unmarshalling）） 。</li><li>Java的内置序列化由于其糟糕的性能和臃肿的编码而臭名昭着【8】</li></ul><blockquote><p>程序通常（至少）使用两种形式的数据：<br>1.在内存中，数据保存在对象，结构体，列表，数组，哈希表，树等中。 这些数据结构针<br>对CPU的高效访问和操作进行了优化（通常使用指针）。<br>2.如果要将数据写入文件，或通过网络发送，则必须将其编码（encode）为某种自包含的<br>字节序列（例如，JSON文档）。 由于每个进程都有自己独立的地址空间，一个进程中<br>的指针对任何其他进程都没有意义，所以这个字节序列表示会与通常在内存中使用的数<br>据结构完全不同 。</p></blockquote><blockquote><p>语言特定的格式<br>许多编程语言都内建了将内存对象编码为字节序列的支持。例如，Java<br>有 java.io.Serializable  【1】，Ruby有 Marshal  【2】，Python有 pickle【3】等等。许多<br>第三方库也存在，例如 Kryo for Java  【4】。<br>这些编码库非常方便，可以用很少的额外代码实现内存对象的保存与恢复。但是它们也有一些深层次的问题：这类编码通常与特定的编程语言深度绑定，其他语言<br>很难读取这种数据。如果以这类编码存储或传输数据，那你就和这门语言绑死在一起了。并且很难将系统与其他组织的系统（可能用的是不同的语言）进行集成。<br>为了恢复相同对象类型的数据，解码过程需要实例化任意类的能力，这通常是安全问题的一个来源【5】：如果攻击者可以让应用程序解码任意的字节序列，他们<br>就能实例化任意的类，这会允许他们做可怕的事情，如远程执行任意代码【6,7】。在这些库中，数据版本控制通常是事后才考虑的。因为它们旨在快速简便地<br>对数据进行编码，所以往往忽略了前向后向兼容性带来的麻烦问题。效率（编码或解码所花费的CPU时间，以及编码结构的大小）往往也是事后才考虑的。<br>例如，Java的内置序列化由于其糟糕的性能和臃肿的编码而臭名昭着【8】。<br><strong>因此，除非临时使用，采用语言内置编码通常是一个坏主意。</strong></p></blockquote><h2 id="第二部分：分布式数据"><a href="#第二部分：分布式数据" class="headerlink" title="第二部分：分布式数据"></a>第二部分：分布式数据</h2><h3 id="第五章：复制"><a href="#第五章：复制" class="headerlink" title="第五章：复制"></a>第五章：复制</h3><h3 id="第六章：分区"><a href="#第六章：分区" class="headerlink" title="第六章：分区"></a>第六章：分区</h3><h3 id="第七章：事务"><a href="#第七章：事务" class="headerlink" title="第七章：事务"></a>第七章：事务</h3><h3 id="第八章：分布式系统的麻烦"><a href="#第八章：分布式系统的麻烦" class="headerlink" title="第八章：分布式系统的麻烦"></a>第八章：分布式系统的麻烦</h3><h3 id="第九章：一致性与共识"><a href="#第九章：一致性与共识" class="headerlink" title="第九章：一致性与共识"></a>第九章：一致性与共识</h3><hr><h2 id="第三部分：派生数据"><a href="#第三部分：派生数据" class="headerlink" title="第三部分：派生数据"></a>第三部分：派生数据</h2><h3 id="第十章：批处理"><a href="#第十章：批处理" class="headerlink" title="第十章：批处理"></a>第十章：批处理</h3><h3 id="第十一章：流处理"><a href="#第十一章：流处理" class="headerlink" title="第十一章：流处理"></a>第十一章：流处理</h3><h3 id="第十二章：数据系统的未来"><a href="#第十二章：数据系统的未来" class="headerlink" title="第十二章：数据系统的未来"></a>第十二章：数据系统的未来</h3>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算的那些骚操作</title>
      <link href="/2019/01/28/wei-yun-suan-de-na-xie-sao-cao-zuo/"/>
      <url>/2019/01/28/wei-yun-suan-de-na-xie-sao-cao-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天读到了大佬<strong>[石杉]</strong>的一篇有关算法的文章，决定记录一下这种花操作，虽然之前刷leetCode看到过这样的操作，但是还是容易忘记，所以在这里整理下。后面也思考了有关这个算法的一些扩展。</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><blockquote><p>一道说简单又不那么好对付的算法题：数组里有一个不同的数，剩余里都是两两相同，找出这个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1]<br>输出: 1</p></blockquote><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><blockquote><p>咋一看其实是很简单的，随便用个map，或者排序一下就可以，但是空间复杂度为O(1)的,这就不能用map了。时间复杂度是O(n),所以不能排序。<br>好像把我们的所有方法都赶尽杀绝了，突然脑袋一片空白。。。</p></blockquote><blockquote><p>还是直接说答案吧，技巧是使用未操作。每个数异或自己，为零。剩余的就是那个单独的数了</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 代码简单就不贴了</span></code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><blockquote><p>数组里有两个不同的数，剩余里都是两两相同，找出这两个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3]<br>输出: 1,3</p></blockquote><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><blockquote><p>如果还是使用刚刚的方法好像是没戏了，因为最后只留下了一个数。那怎么解答啊？<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。<br>我们利用不为0的那个位，将数组<strong>按这位是否是1</strong>(比如是第三位)，拆分开来。那么就形成了两个题目1的情况了，得解。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">findDiff</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 修改其中一个，生成两个不同的数</span>      arr<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">365</span><span class="token punctuation">;</span>      <span class="token function">method</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">^=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> bitIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">>></span> bitIndex<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      bitIndex <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找到那个为1 的位</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>temp <span class="token operator">>></span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 填进来，取后一位</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将当前的数交换出来</span>        <span class="token keyword">int</span> temp1 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp1<span class="token punctuation">;</span>        right <span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> leftNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftNumber <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rightNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rightNumber <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leftNumber<span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> rightNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="继续推广"><a href="#继续推广" class="headerlink" title="继续推广"></a>继续推广</h2><blockquote><p>数组里有3个不同的数，剩余里都是两两相同，找出这三个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3,5]<br>输出: 1,3，5</p></blockquote><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><blockquote><p>如果还是使用刚刚的2方法好像是没戏了，因为两个数的抑或可能覆盖另外一个数的值。那有要怎么办啊。<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树在jdk中的实现</title>
      <link href="/2019/01/26/hong-hei-shu-rbtree-zai-jdk-zhong-de-shi-xian/"/>
      <url>/2019/01/26/hong-hei-shu-rbtree-zai-jdk-zhong-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>jdk里主要有TreeMap和HashMap里有用到红黑树的数据结构，我觉得TreeMap的实现看起来友好一点，但是长时间不看也容易忘记，在这一并整理一下。本次源码是基于jdk1.8的TreeMap的插入和删除的方法。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>红黑树的<strong>基本概念</strong>还是贴上来好点，该数据结构必须<strong>同时</strong>满足下面5点条件,<a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noopener">参见wiki</a>：</p><blockquote><ol><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点    </li></ol></blockquote><blockquote><p>其实如果你能细心看完wiki的介绍并理解这里就不用看了，由于情况较多我这里是跟着源码做的总结，个人觉得删除相对难理解一点。</p></blockquote><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入相对简单点，主要的工作是修复插入带来的影响，梳理下<strong>核心逻辑</strong>：</p><blockquote><p>父节点是红色的时候才会需要调整</p><ol><li>获取到叔节点的颜色  <ol><li>为红色：将父节点和叔节点染黑，爷节点染红，问题推向爷节点(<strong>回到开始</strong>)</li><li>为黑色：<ol><li>先将当前节点方向变为和父节点同向(即当前节点，父节点，爷节点摆成一条直线)</li><li>换色(交换父，爷节点颜色) + 旋转(爷节点为中心) <strong>调整结束</strong></li></ol></li></ol></li></ol></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** From CLR */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 父节点是红色的时候才会需要调整</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>color <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  父节点是左节点的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">leftOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 1. 获取到叔节点U(uncle)</span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> y <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果U为红色:将父节点和叔节点染黑，爷节点染红，问题向爷节点递推(进入下一个循环)</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// U 为黑色 不用递推可以直接解决</span>                    <span class="token comment" spellcheck="true">// 如果当前节点是父节点的右节点，左旋，将自己变成父节点的左节(变得和父节点同向)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 等价转换</span>                        x <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">rotateLeft</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 换色(交换父，爷节点颜色) + 旋转(爷节点为中心)</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父节点已经为黑</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 此时父节点为黑色，调整结束</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对称的，和上面思路一样</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        root<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除相对复杂，主要的工作是修复删除带来的影响，梳理下<strong>核心逻辑</strong>：</p><blockquote><p>当前节点是黑色的时候才需要修复，前面先使用后继节点删除，所以需要向当前节点这里<strong>补一个黑色节点</strong></p><ol><li>得到兄弟节点<ol><li>将兄弟节点变为黑色(如果兄弟节点为红的话)</li><li><strong>兄弟节点</strong>是否有<strong>红色子节点</strong><ol><li>没有: 问题移向父节点(<strong>回到开始1</strong>)</li><li>有: 先将和当前节点反方向上的<strong>兄弟节点的子节点N</strong>变为红色，将N染黑，交换兄弟和父节点颜色，以父节点为中心，向当前节点方向旋转(<strong>结束</strong>)</li></ol></li></ol></li></ol></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** From CLR */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fixAfterDeletion</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前为左节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token function">leftOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 得到兄弟节点 </span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> sib <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果兄弟节点为红色， 交换兄弟节点和父节点颜色并左旋(目的是将兄弟节点变为黑色) </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span> <span class="token operator">==</span> RED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sib <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 兄弟节点是否有红色子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">leftOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">==</span> BLACK <span class="token operator">&amp;&amp;</span>                    <span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">rightOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将兄弟节点的右子节点变为红色</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">rightOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> BLACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">leftOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">rotateRight</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">;</span>                        sib <span class="token operator">=</span> <span class="token function">rightOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 将兄弟节点右子节点染黑，交换兄弟和父节点的颜色</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span>sib<span class="token punctuation">,</span> <span class="token function">colorOf</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">rightOf</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 以父节点为中心左旋，这样自己这边就多了一个黑色节点，补偿结束！</span>                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token function">parentOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> root<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对称,逻辑一模一样</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">setColor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>wiki里的c实现使用的是<strong>尾递归</strong>,但是java使用的是<strong>非递归的while</strong>实现的，好像目前java没有对尾递归做优化。</p></blockquote><h3 id="插入的修复"><a href="#插入的修复" class="headerlink" title="插入的修复"></a>插入的修复</h3><p><img src="/images/红黑树插入调整.png" alt=""></p><blockquote><p>图片点击放大</p></blockquote><hr><h3 id="删除的修复"><a href="#删除的修复" class="headerlink" title="删除的修复"></a>删除的修复</h3><p><img src="/images/红黑树删除修复.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查快改慢B+树,改快查慢LSM树</title>
      <link href="/2019/01/23/cha-kuai-gai-man-b-shu-gai-kuai-cha-man-lsm-shu/"/>
      <url>/2019/01/23/cha-kuai-gai-man-b-shu-gai-kuai-cha-man-lsm-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://bing.ioliu.cn/photo/EyeFireworks_EN-AU4834024020" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>书本<a href=""><strong>数据结构与算法</strong></a>里面就提到过B树在索引上的应用,而实际应用中一直有许多牛人又对这个数据结构持续做了多优，然这个结构一直有。</p></blockquote><hr><h3 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h3><p>数据库的索引其实指的是<strong>索引文件</strong>，而B+树是我们索引文件<strong>储存方式</strong>。用于给存储引擎(这里指innodb)查找指定的数据，这里有必要温习一下数据库查根据where条件查找数据的过程，过程发生在storage engine层：</p><blockquote><ol><li>index Key<ul><li>首先将index key条件满足的索引记录区间确定，再索引上使用index filter进行过滤</li></ul></li><li>index Filter<ul><li>将满足的index filter条件的索引记录才去回表取出整行记录返回server层</li><li>不满足index filter条件的索引记录丢弃，不回表、也不会返回server层 </li></ul></li><li>Table Filter<ul><li>非索引层面的数据过滤，server 层对返回的数据，使用table filter条件做最后的过滤。</li></ul></li></ol></blockquote><hr><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><h4 id="结构特征"><a href="#结构特征" class="headerlink" title="结构特征"></a>结构特征</h4><blockquote><ol><li>有序,B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li><li>B+树的所有数据，均存储在B+树的叶节点</li><li>B+树叶节点的所有页面，通过双向链表链接起来</li></ol></blockquote><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><blockquote><ul><li>支持范围查找，所以需要有序 </li><li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数。</li><li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li><li>B+树的所有数据，均存储在B+树的叶节点  </li></ul></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><ul><li>mysql的B+树会在大量的<strong>随机io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响整体查询修改效率。</li><li>每次的页分裂会导致本页面的空间利用率下降，使得空间利用率向50%靠近。 </li></ul></blockquote><hr><h3 id="LSM树"><a href="#LSM树" class="headerlink" title="LSM树"></a>LSM树</h3><p>LSM（Log-Structured Merge-Trees）与B+树相比，牺牲了部分读的性能来换取写的性能(通过批量写入)。 Hbase、LevelDB、rocksDB采用 LSM 树的结构。LSM可以快速建立索引。</p><h4 id="结构特征-1"><a href="#结构特征-1" class="headerlink" title="结构特征"></a>结构特征</h4><p>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><blockquote><ul><li>lsm数是基于 </li><li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数</li><li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li><li>B+树的所有数据，均存储在B+树的叶节点  </li></ul></blockquote><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><blockquote><ul><li>mysql的B+树会在大量的随机<strong>io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响查询效率。</li><li>每次的页分裂会导致页面的空间利用率下降到50% </li></ul></blockquote><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><blockquote><ul><li>布隆过滤器代替二分法查找</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> mysql </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁究竟应该怎么实现？</title>
      <link href="/2019/01/22/jiu-jing-ying-gai-zen-me-shi-xian-fen-bu-shi-suo/"/>
      <url>/2019/01/22/jiu-jing-ying-gai-zen-me-shi-xian-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://ww1.sinaimg.cn/large/006Cwrd9gy1fzfs9sj3xkj31hc0u07de.jpg" alt=""></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前几天突然接到任务说要实现一个分布式锁，由于之前有自己实现过一些demo，对各种分布式锁也都有一定的了解，<br>实现的时候会熟练一些，但是毕竟是公司直接要拿来用的东西，反复斟酌后才把初期的方案定了下来。</p><h3 id="常用的分布式锁简介"><a href="#常用的分布式锁简介" class="headerlink" title="常用的分布式锁简介"></a>常用的分布式锁简介</h3><p>基于redis的分布式锁</p><ul><li>使用setNX的方式</li><li>直接使用redis官方的redission已经实现好的redLock(有一些人说这才是分布式锁的正确方式，我这里不做评价，详见)</li></ul><p>基于zookeeper的分布式锁</p><ul><li>利用zookeeper的顺序临时节点，自旋比较自己的节点是否是节点里的最小值，来获得锁。</li><li>需要注意羊群效应，指定node监听自己前面的node即可</li></ul><p>基于etcd的分布式锁</p><ul><li>原理与zookeeper类似</li></ul><h3 id="基于redis分布式锁的具体方案及细节"><a href="#基于redis分布式锁的具体方案及细节" class="headerlink" title="基于redis分布式锁的具体方案及细节"></a>基于redis分布式锁的具体方案及细节</h3>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流方案对比</title>
      <link href="/2019/01/21/xian-liu-fang-an-dui-bi/"/>
      <url>/2019/01/21/xian-liu-fang-an-dui-bi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="广为流传的接口限流方案"><a href="#广为流传的接口限流方案" class="headerlink" title="广为流传的接口限流方案"></a>广为流传的接口限流方案</h2><h3 id="漏斗桶"><a href="#漏斗桶" class="headerlink" title="漏斗桶"></a>漏斗桶</h3><p>如果将请求比作是水，水来了都先放进桶里，并以限定的速度出水，桶满会溢出，体现为拒绝服务。<br>漏斗有一个进水口和一个出水口，出水口以一定速率出水，并且有一个最大出水速率。<br>在漏斗中没有水的时候，</p><ul><li>如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，不会积水</li><li>如果进水速率大于最大出水速率，漏斗会以最大速率出水，此时，多余的水会积在漏斗中<br>在漏斗中有水的时候</li><li>出水口以最大速率出水</li><li>如果漏斗未满，且有进水的话，那么这些水会积在漏斗中</li><li><p>如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外<br><img src="http://ww1.sinaimg.cn/large/006Cwrd9ly1fy4wszq4y5j31hc0u0thv.jpg" alt=""></p><h3 id="桶令牌"><a href="#桶令牌" class="headerlink" title="桶令牌"></a>桶令牌</h3><p>对于很多应用场景来说，其实除了要求能够限制数据的平均传输速率外，还要应该求允许某种程度的突发传输。那么漏桶算法就无法满足，令牌桶算法更为适合。<br>令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；<br>当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。</p><h4 id="RateLimiter-用法"><a href="#RateLimiter-用法" class="headerlink" title="RateLimiter 用法"></a>RateLimiter 用法</h4><h4 id="google的guava包"><a href="#google的guava包" class="headerlink" title="google的guava包"></a><a href="https://github.com/google/guava">google的guava包</a></h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 测试一下</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ListeningExecutorService executorService <span class="token operator">=</span> MoreExecutors<span class="token punctuation">.</span><span class="token function">listeningDecorator</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 指定每秒放1个令牌</span>          RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 请求RateLimiter, 超过permits会被阻塞</span>              <span class="token comment" spellcheck="true">//acquire(int permits)函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回</span>                Double acquire <span class="token operator">=</span> null<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  acquire <span class="token operator">=</span> limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"获取令牌成功，获取耗："</span> <span class="token operator">+</span> acquire <span class="token operator">+</span> <span class="token string">" 第 "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" 个任务执行"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      String str<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>acquire函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回<br>一个RateLimiter主要定义了发放permits的速率。如果没有额外的配置，permits将以固定的速度分配，单位是每秒多少permits。默认情况下，Permits将会被稳定的平缓的发放。</p><h3 id="令牌桶算法VS漏桶算法"><a href="#令牌桶算法VS漏桶算法" class="headerlink" title="令牌桶算法VS漏桶算法"></a>令牌桶算法VS漏桶算法</h3><p>漏桶</p></li><li>漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。<br>令牌桶</li><li>生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。</li></ul><h2 id="还有那些简单易懂的"><a href="#还有那些简单易懂的" class="headerlink" title="还有那些简单易懂的?"></a>还有那些简单易懂的?</h2><p>限流方案有很多他们有各自的使用场景，下面看两个有关key的限流</p><h3 id="环形窗口"><a href="#环形窗口" class="headerlink" title="环形窗口"></a>环形窗口</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>用定时任务维护一个环，头结点走完一周的时间是指定的窗口时间</li><li>每次访问key或者接口的时候将时间戳放入环内，头结点碰到的节点都会重置。<br>####</li><li>优势可以异步维护各自的key的访问量，而不用主线程每次去判断</li><li><h3 id="定制窗口"><a href="#定制窗口" class="headerlink" title="定制窗口"></a>定制窗口</h3></li><li>每次请求记录时间戳，查看当前窗口内的节点数目，并将窗口外的节点删除</li><li>每次请求先该key对应的节点数量少于指定的可以直接进入请求</li><li>代码简单逻辑清晰容易实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC 源码自探</title>
      <link href="/2019/01/17/springmvc-yuan-ma-zi-tan/"/>
      <url>/2019/01/17/springmvc-yuan-ma-zi-tan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="springMVC-源码自探"><a href="#springMVC-源码自探" class="headerlink" title="springMVC 源码自探"></a>springMVC 源码自探</h2><p><img src="http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg" alt="I love it when a plan comes together."></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>弄清楚springMVC流程对我们写rest接口有莫大的好处，因为和它绑定在一起的还有这些重要的东西：</p><blockquote><ol><li>http/https的知识。http请求的组成。</li><li>消息转化(参数是<strong>如何解析</strong>的，<strong>什么时候解析</strong>的，我们给常用的注解是如何实现的)</li><li>springMVC拦截器的实现原理</li><li>其他，如消息监控的植入actuator,zipkin等。</li></ol></blockquote><h3 id="spring的启动"><a href="#spring的启动" class="headerlink" title="spring的启动"></a>spring的启动</h3><blockquote><p>spring启动的时候会扫描各个controller，并默认以单例的形式生成各个handler(controller类),handlerMethod().</p></blockquote><h3 id="一个rest请求的到来"><a href="#一个rest请求的到来" class="headerlink" title="一个rest请求的到来"></a>一个rest请求的到来</h3><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><blockquote><p>如果入口是从最开始说的话其实是从tomcat的各个过滤器(filter)顺序调用过来的，再由httpServlet拉起springMVC框架的service方法<br>确定方法类型后执行doPost，或者doGet。下面只会会将几个重要过程领出来聊一聊</p></blockquote><h4 id="DispatcherServlet-doDispatch"><a href="#DispatcherServlet-doDispatch" class="headerlink" title="DispatcherServlet.doDispatch()"></a>DispatcherServlet.doDispatch()</h4><blockquote><p>先从10个handlerMappings中的找到对应的handlerMapping,然后从这个handlerMapping通过urlPath，找到对应方法的handler<br> 并将拦截器加入handler组装成HandlerExecutionChain，如果执行HandlerExecutionChain的时候拦截器返回false方法会在止到这里直接返回。<br> 拦截器如果通过，找到能够使用这个handler(Method Handler)的handlerAdapter（一般是这个:RequestMappingHandlerAdapter）<br> （原本有三个找到对应的支持的） 供以后使用，也就是下面的这个方法：</p></blockquote><h4 id="ServletInvocableHandlerMethod-invokeAndHandle"><a href="#ServletInvocableHandlerMethod-invokeAndHandle" class="headerlink" title="ServletInvocableHandlerMethod.invokeAndHandle()"></a>ServletInvocableHandlerMethod.invokeAndHandle()</h4><blockquote><p>执行里面的方法，并处理返回值<br> a. 设置响应状态，<br> b. 设置mavContainer处理状态设置为未处理完毕。<br> c. 并对返回接口进行处理,responseBody的注解会在这里使用(用于找到返回值的handler)，并进行消息转化(json)</p></blockquote><h4 id="InvocableHandlerMethod-invokeForRequest"><a href="#InvocableHandlerMethod-invokeForRequest" class="headerlink" title="InvocableHandlerMethod.invokeForRequest()"></a>InvocableHandlerMethod.invokeForRequest()</h4><blockquote><p>这里会解析并映射入参，这里会有各种解析参数的解析器，找到对应的解析器后然后会根据参数名字到request里面取值。<br>后放入到对应的参数列表里面再将参数放入代理方法执行invoke，并返回业务代码里的返回值。<br>springMVC的字段名在request里面是这样的：如果是get方法一般就是上面的parameterMap里面的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickSort Application in java</title>
      <link href="/2018/11/25/jdk-de-kuai-su-pai-xu/"/>
      <url>/2018/11/25/jdk-de-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg" alt="I love it when a plan comes together."></p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p><strong>对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，而快速排序是这种单一排序里面综合表现最好的。<br>而实际应用中的排序可要考虑的情况实在是太多了，兴趣使然，我看了下jdk的快排，过程不多说看大佬究竟是怎么写的吧</strong></p><blockquote><p>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，<br>说明维护的人还是很愿意花精力在这个方法上的，排序的算法代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，<br>花了点时间整理下这个算法。在看这个之前最好是对各种基本的排序有一定的了解，这样才不至于一脸懵。</p></blockquote><h3 id="涉及的算法"><a href="#涉及的算法" class="headerlink" title="涉及的算法"></a>涉及的算法</h3><ol><li>插入排序(之前1.7有用binary insertion,既二分法找到插入点后copy)</li><li>归并排序</li><li>快速排序<ul><li>单轴(one pivot)双切分快排序(带等号),也就是荷兰国旗问题优化.</li><li>双轴三切分快排</li></ul></li><li>计数排序(用于数值范围小的情况，byte，short，char类型的时候)</li><li>timSort(用于分析本身排序情况)</li></ol><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>尽量发掘各自单一排序算法自己优势，当有合适条件的时候就使用对应的基本排序，并穿插一些实用的优化：</p><ol><li>小数据量：插入排序</li><li>适中：快速排序<ul><li>结合插入排序</li><li>划分区间的时候，带等号使用单轴快排，否则双轴快排</li><li>递归调用自己 </li></ul></li><li>大量：先分用timSort分析数据本身排序状况，<ul><li>衡量指标：run(单调区间的长度)和runs(单调区间的数目)</li><li>满足对应的常量要求就用归并，否则就用快排(归并的次数太多就用快排，否则采用归并)</li></ul></li></ol><h3 id="具体代码-jdk1-8对int-的排序"><a href="#具体代码-jdk1-8对int-的排序" class="headerlink" title="具体代码:(jdk1.8对int[]的排序)"></a>具体代码:(jdk1.8对int[]的排序)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Sort</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 将给定区间数组排序，如果可以的话使用归并排序     */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span>                         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> work<span class="token punctuation">,</span> <span class="token keyword">int</span> workBase<span class="token punctuation">,</span> <span class="token keyword">int</span> workLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对于数据量少的直接使用快排</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> QUICKSORT_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 286</span>                <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 基于插入，单双轴的快排见下面</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*  timSort分析数据排序情况， run[i]是第i个run的开始             *  一个run是一节单调区间(升序或者降序)             */</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>MAX_RUN_COUNT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> run<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> run<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// </span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 降序</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lo <span class="token operator">=</span> run<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>lo <span class="token operator">&lt;</span> <span class="token operator">--</span>hi<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 相等</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> MAX_RUN_LENGTH<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等号多了直接将这里短丢到快排里面</span>                            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">==</span> MAX_RUN_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 目前MAX_RUN_COUNT = 67</span>                    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 基于插入，单双轴的快排见下面</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长</span>            <span class="token comment" spellcheck="true">// ...... 归并</span>            <span class="token comment" spellcheck="true">// 结束</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面是<strong>核心快排</strong>(有点长)我梳理下：</p><ol><li>小范围的用插入排序结束对应区间的排序，跳过</li><li>切分数组成6个区间（不是等分），中间有五个点，把这五个点排好序</li><li>判断这五个点有没有相等的<ul><li>有：双轴三切分<ul><li>前后部分直接递归（转到第一步）</li><li>如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）</li></ul></li><li>没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Sort</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Sorts the specified range of the array by Dual-Pivot Quicksort.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">boolean</span> leftmost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用插入排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> INSERTION_SORT_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// INSERTION_SORT_THRESHOLD = 47</span>            <span class="token comment" spellcheck="true">// 左边是否是最大</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftmost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 普通的插入排序</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> ai <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>ai <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">--</span> <span class="token operator">==</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ai<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 跳过最长升序                 */</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 * 这里也不是普通的的插入排序，                 * 使用的是双元素插入法更优。                 */</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token operator">++</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token operator">++</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> a1 <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">&lt;</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span> a1 <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a1 <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span><span class="token operator">++</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a2 <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> last <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>last <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token operator">--</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    a<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                a<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1</span>        <span class="token keyword">int</span> seventh <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 各个等分点</span>        <span class="token keyword">int</span> e3 <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The midpoint</span>        <span class="token keyword">int</span> e2 <span class="token operator">=</span> e3 <span class="token operator">-</span> seventh<span class="token punctuation">;</span>        <span class="token keyword">int</span> e1 <span class="token operator">=</span> e2 <span class="token operator">-</span> seventh<span class="token punctuation">;</span>        <span class="token keyword">int</span> e4 <span class="token operator">=</span> e3 <span class="token operator">+</span> seventh<span class="token punctuation">;</span>        <span class="token keyword">int</span> e5 <span class="token operator">=</span> e4 <span class="token operator">+</span> seventh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用插入排序将这些点快速排好序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Pointers</span>        <span class="token keyword">int</span> less  <span class="token operator">=</span> left<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The index of the first element of center part</span>        <span class="token keyword">int</span> great <span class="token operator">=</span> right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The index before the first element of right part</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>e1<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>e5<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取第二和第四点为轴</span>            <span class="token keyword">int</span> pivot1 <span class="token operator">=</span> a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pivot2 <span class="token operator">=</span> a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>e2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>e4<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 找到开始和结束向中间靠拢的合适下标</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>less<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 双轴三切分排序</span>            <span class="token comment" spellcheck="true">/*             *   left part           center part                   right part             * +--------------------------------------------------------------+             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  > pivot2  |             * +--------------------------------------------------------------+             *               ^                          ^       ^             *               |                          |       |             *              less                        k     great             */</span>            outer<span class="token operator">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part</span>                    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">></span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to right part</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>great<span class="token operator">--</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span> outer<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] &lt;= pivot2</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                        a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token operator">++</span>less<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pivot1 &lt;= a[great] &lt;= pivot2</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Swap pivots into their final positions</span>            a<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> a<span class="token punctuation">[</span>less  <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>less  <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pivot1<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pivot2<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 前后切分，递归</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> less <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> leftmost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> great <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*              * 如果中间长度大于 length 4/7 的长度             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>less <span class="token operator">&lt;</span> e1 <span class="token operator">&amp;&amp;</span> e5 <span class="token operator">&lt;</span> great<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*                 *   left part         center part                  right part                 * +----------------------------------------------------------+                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |                 * +----------------------------------------------------------+                 *              ^                        ^       ^                 *             less                      k     great                 */</span>                outer<span class="token operator">:</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                        a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                        <span class="token operator">++</span>less<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to right part</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>great<span class="token operator">--</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">break</span> outer<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">==</span> pivot1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] &lt; pivot2</span>                            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                            a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> pivot1<span class="token punctuation">;</span>                            <span class="token operator">++</span>less<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pivot1 &lt; a[great] &lt; pivot2</span>                            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                        <span class="token operator">--</span>great<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 中间递归</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> less<span class="token punctuation">,</span> great<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 单轴快排</span>            <span class="token keyword">int</span> pivot <span class="token operator">=</span> a<span class="token punctuation">[</span>e3<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             *   left part    center part              right part             * +-------------------------------------------------+             * |  &lt; pivot  |   == pivot   |     ?    |  > pivot  |             * +-------------------------------------------------+             *              ^              ^        ^             *             less            k      great             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> less<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> great<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> ak <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ak <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Move a[k] to left part</span>                    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">++</span>less<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[k] > pivot - Move a[k] to right part</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token operator">--</span>great<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] &lt;= pivot</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>less<span class="token punctuation">]</span><span class="token punctuation">;</span>                        a<span class="token punctuation">[</span>less<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>great<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token operator">++</span>less<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// a[great] == pivot</span>                        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>great<span class="token punctuation">]</span> <span class="token operator">=</span> ak<span class="token punctuation">;</span>                    <span class="token operator">--</span>great<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * 双切分，递归             */</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> less <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> leftmost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> great <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ol><li>数据量小(n&lt;47)：使用插入排序</li><li>数据量大(n&gt;286)：且符合归并排序的指标(run&lt;33,runs&lt;67)就用归并</li><li>别的时候都是使用快排递归解决</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
